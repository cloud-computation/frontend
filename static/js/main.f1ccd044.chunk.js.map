{"version":3,"sources":["components/header/logo.png","components/avatar/user.svg","service/Transport.ts","context/AppContext.ts","components/container/Container.tsx","components/menu/Menu.tsx","components/popup/Popup.tsx","components/text-field/TextField.tsx","components/custom-form/CustomForm.tsx","api/auth.ts","api/user.ts","api/post.ts","api/comment.ts","hooks/useAuth.ts","hooks/useCustomSnackbar.ts","utils/error.ts","utils/file.ts","hooks/usePost.ts","widgets/auth-popup/AuthPopup.tsx","components/confirm-popup/ConfirmPopup.tsx","components/header/Header.tsx","components/post-preview/PostPreview.tsx","pages/Main.tsx","components/private-route/PrivateRoute.tsx","components/jss-provider/JssProvider.tsx","components/avatar/Avatar.tsx","components/upload-avatar/UploadAvatar.tsx","hooks/useFile.ts","pages/Profile.tsx","utils/yup.ts","hooks/useUser.ts","pages/CreatePost.tsx","components/comment/Comment.tsx","components/add-comment/AddComment.tsx","pages/Post.tsx","hooks/useComment.ts","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","transport","headers","token","instance","serverUrl","this","axios","create","baseURL","url","params","get","config","response","data","post","put","delete","localStorage","setItem","formData","FormData","mapValues","value","key","isString","File","append","JSON","stringify","history","createBrowserHistory","AppContext","styles","inner","css","Container","props","className","cx","children","Menu","anchor","onClose","open","options","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","map","item","index","MenuItem","onClick","handler","popup","header","title","close","Popup","Dialog","classes","paper","DialogTitle","disableTypography","Typography","variant","IconButton","Close","errorMessage","emotion","errorText","TextField","name","label","error","type","size","InputLabelProps","textarea","validate","disable","field","meta","fullWidth","multiline","disabled","helperText","FormHelperTextProps","root","margin","CustomForm","onSubmit","validationSchema","render","validateOnBlur","validateOnChange","handleSubmit","useCallback","initialValues","stubObject","enableReinitialize","signUp","signIn","forgotPassword","login","getUser","editUser","user","uploadAvatar","formatToFormData","deleteAvatar","changePassword","fetchList","fetchOne","id","createPost","editPost","deletePost","getList","postId","createComment","editComment","deleteComment","useAuth","AuthAPI","useCustomSnackbar","enqueueSnackbar","useSnackbar","showErrorSnackbar","message","showSuccessSnackbar","showDefaultSnackbar","showWarningSnackbar","showInfoSnackbar","getServerError","dataURLtoFile","dataurl","filename","head","split","src","last","mime","match","byteString","atob","n","length","u8arr","Uint8Array","charCodeAt","blob","Blob","getExtension","resolve","file","reader","FileReader","readAsArrayBuffer","onloadend","result","ext","fileType","getUnsafeExtension","toLowerCase","usePost","useState","posts","setPosts","undefined","setPost","getPostList","PostAPI","then","getPost","signInValidationSchema","Yup","shape","email","required","password","min","signUpValidationSchema","forgotPasswordValidationSchema","card","footer","link","AuthPopup","setUser","mode","setMode","popupTitle","Map","setToken","catch","err","form","Button","color","submitForm","isValid","align","button","actions","ConfirmPopup","cancelTitle","submitTitle","DialogActions","content","profile","image","LOGO","require","Header","setAnchorEl","isMenuOpen","Boolean","userContext","useContext","UserContext","logoutPopupVisible","setLogoutPopupVisible","authPopup","setAuthPopup","onCloseLogoutPopup","handleMenuClose","to","alt","Tooltip","event","currentTarget","avatar","AccountCircle","path","push","removeItem","description","PostPreview","Card","CardActionArea","CardMedia","background","CardContent","gutterBottom","component","text","Main","useEffect","startIcon","Add","PrivateRoute","auth","rest","routeProps","exact","insertionPoint","document","getElementById","jss","jssPreset","JssProvider","StylesProvider","displayName","wrapper","icons","icon","input","progress","UploadAvatar","onDeleteAvatar","loading","imageClassName","buttonVisible","modalOpen","setModalOpen","inputRef","useRef","setFile","setSrc","setError","loadFile","f","a","getError","readAsDataURL","fromEvent","subscribe","maxFileSize","Promise","whiteList","indexOf","join","deleteFile","useFile","setFieldValue","useFormikContext","onModalClose","current","click","Edit","CloudUpload","ref","onChange","target","files","LinearProgress","changeUserDataValidationSchema","msg","test","exclusive","reference","changePasswordValidationSchema","newPassword","equalTo","repeatPassword","Profile","UserAPI","updateUser","useUser","handleAvatar","handleDeleteAvatar","omit","shrink","values","isEqual","backgroundImage","fields","footerContent","imageError","CreatePost","errors","style","comment","Comment","onDelete","onEdit","edit","setEdit","authorId","Delete","moment","createdAt","locale","format","AddComment","onCreate","mask","info","date","comments","Post","useParams","setComments","getComments","CommentAPI","useComment","Number","init","createContext","App","logged","setLogged","getItem","Provider","window","location","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.f1ccd044.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d2b1e190.png\";","module.exports = __webpack_public_path__ + \"static/media/user.7a21cbe9.svg\";","import axios, { AxiosInstance } from \"axios\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport { mapValues, isString } from \"lodash\";\r\nimport {TResponse} from \"../entity\";\r\n\r\nexport type TransportConfig = Pick<AxiosRequestConfig, \"headers\" | \"baseURL\" | \"params\">;\r\n\r\nexport class Transport {\r\n    private headers = {};\r\n    private token?: string;\r\n    private instance: AxiosInstance = null;\r\n\r\n    init(serverUrl: string): void {\r\n        this.instance = axios.create({\r\n            baseURL: serverUrl,\r\n        });\r\n    }\r\n\r\n    async get<Response>(url: string, params?: object): Promise<TResponse<Response>> {\r\n        const response = await this.instance.get(url, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    async post<Request, Response>(\r\n        url: string,\r\n        data?: Request,\r\n        params?: object,\r\n    ): Promise<TResponse<Response>> {\r\n        const response = await this.instance.post(url, data, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    async put<Request, Response>(\r\n        url: string,\r\n        data: Request,\r\n        params?: object,\r\n    ): Promise<TResponse<Response>> {\r\n        const response = await this.instance.put(url, data, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    async delete<Response = void>(url: string, params?: object): Promise<TResponse<Response>> {\r\n        const response = await this.instance.delete(url, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    setToken(token: string): void {\r\n        this.token = token;\r\n        localStorage.setItem(\"token\", token);\r\n    }\r\n\r\n    formatToFormData(params: {}): FormData {\r\n        const formData = new FormData();\r\n        mapValues(params, (value: string | File, key) => {\r\n            const isFile = !isString(value) && (value as {}) instanceof File;\r\n            if (!isFile && !isString(value)) {\r\n                return formData.append(key, JSON.stringify(value));\r\n            }\r\n            formData.append(key, value);\r\n        });\r\n        return formData;\r\n    }\r\n\r\n    private config(params?: object): TransportConfig {\r\n        return {\r\n            headers: {\r\n                ...this.headers,\r\n                \"Content-Type\": \"application/json\",\r\n                token: this.token\r\n            },\r\n            params,\r\n        };\r\n    }\r\n}\r\n\r\nexport const transport = new Transport();\r\n","import { createBrowserHistory, History } from \"history\";\n\nconst history = createBrowserHistory();\n\nexport const AppContext = {\n    getHistory(): History {\n        return history;\n    },\n};\n","import React, { FC } from \"react\";\nimport { css, cx } from \"emotion\";\n\ninterface Props {\n    className?: string;\n}\n\nconst styles = {\n    inner: css`\n        width: 1200px;\n        margin: 0 auto;\n        padding: 40px 0;\n    `,\n};\n\nexport const Container: FC<Props> = (props) => {\n    return <div className={cx(styles.inner, props.className)}>{props.children}</div>;\n};\n","import React from \"react\";\r\nimport { Menu as MaterialMenu, MenuItem } from \"@material-ui/core\";\r\nimport {IOption} from \"../../entity\";\r\n\r\ninterface IMenuProps {\r\n    anchor: HTMLElement | null;\r\n    open: boolean;\r\n    options: IOption[];\r\n\r\n    onClose?(): void;\r\n}\r\n\r\nexport const Menu = (props: IMenuProps) => {\r\n    const { anchor, onClose, open, options = [] } = props;\r\n\r\n    return (\r\n        <MaterialMenu\r\n            open={open}\r\n            anchorEl={anchor}\r\n            onClose={onClose}\r\n            anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n            }}\r\n            keepMounted\r\n            transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n            }}\r\n        >\r\n            {options.map((item, index) => (\r\n                <MenuItem onClick={item.handler} key={index}>\r\n                    {item.value}\r\n                </MenuItem>\r\n            ))}\r\n        </MaterialMenu>\r\n    );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { Dialog, DialogTitle, IconButton, Typography } from \"@material-ui/core\";\r\nimport { css } from \"emotion\";\r\nimport { Close } from \"@material-ui/icons\";\r\n\r\nexport interface IPopupProps {\r\n    title: string;\r\n    open: boolean;\r\n\r\n    onClose?(): void;\r\n}\r\n\r\nconst styles = {\r\n    popup: css`\r\n        min-width: 600px;\r\n    `,\r\n    header: css`\r\n        display: flex;\r\n        width: 100%;\r\n        align-items: center;\r\n        box-sizing: border-box;\r\n        width: 100%;\r\n        padding: 16px 10px 16px 24px !important;\r\n    `,\r\n    title: css`\r\n        width: 400px;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    `,\r\n    close: css`\r\n        margin-left: auto !important;\r\n    `\r\n};\r\n\r\nexport const Popup: FC<IPopupProps> = (props) => {\r\n    const { open, title, onClose, children } = props;\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} classes={{paper: styles.popup}}>\r\n            <DialogTitle className={styles.header} disableTypography>\r\n                <Typography variant={\"h6\"} className={styles.title}>{title}</Typography>\r\n                <IconButton onClick={onClose} className={styles.close}>\r\n                    <Close />\r\n                </IconButton>\r\n            </DialogTitle>\r\n            {children}\r\n        </Dialog>\r\n    );\r\n};\r\n","import * as emotion from \"emotion\";\r\nimport React from \"react\";\r\nimport { Field, FieldProps, FieldValidator } from \"formik\";\r\nimport { TextField as MaterialTextField, InputLabelProps } from \"@material-ui/core\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\n\r\ninterface ITextFieldProps {\r\n    name: string;\r\n    InputLabelProps?: InputLabelProps;\r\n    label?: string;\r\n    error?: boolean;\r\n    classes?: object;\r\n    type?: string;\r\n    size?: \"small\" | \"medium\";\r\n    textarea?: boolean;\r\n    validate?: FieldValidator;\r\n    disable?: boolean;\r\n}\r\n\r\nconst styles = {\r\n    errorMessage: emotion.css`\r\n        margin: 10px 0 0 0 !important;\r\n        display: flex;\r\n        align-items: center;\r\n    `,\r\n    errorText: emotion.css`\r\n        padding-left: 10px;\r\n    `,\r\n};\r\n\r\nexport const TextField = (props: ITextFieldProps) => {\r\n    const {\r\n        name,\r\n        label,\r\n        error,\r\n        classes,\r\n        type = \"text\",\r\n        size,\r\n        InputLabelProps,\r\n        textarea = false,\r\n        validate,\r\n        disable\r\n    } = props;\r\n\r\n    return (\r\n        <Field name={name} validate={validate}>\r\n            {({ field, meta }: FieldProps) => (\r\n                <MaterialTextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    label={label}\r\n                    type={type}\r\n                    error={!!meta.error || error}\r\n                    size={size}\r\n                    InputLabelProps={InputLabelProps}\r\n                    multiline={textarea}\r\n                    disabled={disable}\r\n                    helperText={\r\n                        meta.error && (\r\n                            <>\r\n                                <ErrorIcon />\r\n                                <span className={styles.errorText}>{meta.error}</span>\r\n                            </>\r\n                        )\r\n                    }\r\n                    FormHelperTextProps={{\r\n                        classes: { root: styles.errorMessage },\r\n                    }}\r\n                    classes={classes}\r\n                    margin=\"normal\"\r\n                    {...field}\r\n                />\r\n            )}\r\n        </Field>\r\n    );\r\n};\r\n","import React, { useCallback } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { FormikErrors, FormikProps } from \"formik/dist/types\";\r\nimport { stubObject } from \"lodash\";\r\n\r\ninterface ICustomFormProps<T> {\r\n    data?: T;\r\n    validationSchema?: any | (() => any);\r\n    validateOnChange?: boolean;\r\n    validateOnBlur?: boolean;\r\n\r\n    render(props?: FormikProps<T>): void;\r\n\r\n    onSubmit?(data: T): void;\r\n\r\n    validate?(data: T): void | object | Promise<FormikErrors<T>>;\r\n}\r\n\r\nexport const CustomForm = <T extends object>(props: ICustomFormProps<T>) => {\r\n    const {\r\n        data = {},\r\n        onSubmit,\r\n        validationSchema,\r\n        render,\r\n        validate,\r\n        validateOnBlur = true,\r\n        validateOnChange = true,\r\n    } = props;\r\n\r\n    const handleSubmit = useCallback(\r\n        (data: T) => {\r\n            if (!onSubmit) {\r\n                return;\r\n            }\r\n            onSubmit(data);\r\n        },\r\n        [onSubmit],\r\n    );\r\n\r\n    return (\r\n        <Formik<T>\r\n            initialValues={data || stubObject()}\r\n            onSubmit={handleSubmit}\r\n            validate={validate}\r\n            validationSchema={validationSchema}\r\n            validateOnChange={validateOnChange}\r\n            validateOnBlur={validateOnBlur}\r\n            enableReinitialize\r\n        >\r\n            {(props) => render(props)}\r\n        </Formik>\r\n    );\r\n};\r\n","import { IResponseMessage, ISignInData, ISignUpData, IUser } from \"../entity\";\nimport { transport } from \"../service\";\n\nexport function signUp(data: ISignUpData) {\n    return transport.post<ISignUpData, IResponseMessage>(`/auth/signUp`, data);\n}\n\nexport function signIn(data: ISignInData) {\n    return transport.post<ISignInData, { token: string }>(\"/auth/signIn\", data);\n}\n\nexport function forgotPassword(data: { email: string }) {\n    return transport.post<{ email: string }, IResponseMessage>(\"/auth/forgotPassword\", data);\n}\n\nexport function login() {\n    return transport.post<{ token: string }, IUser>(\"/auth/login\");\n}\n","import {IChangePassword, IUpdateAvatar, IUser} from \"../entity\";\r\nimport {transport} from \"../service\";\r\n\r\nexport function getUser() {\r\n    return transport.get<IUser>(\"/user\");\r\n}\r\n\r\nexport function editUser(user: Partial<IUser>) {\r\n    return transport.put<Partial<IUser>, IUser>(\"/user\", user);\r\n}\r\n\r\nexport function uploadAvatar(data: IUpdateAvatar) {\r\n    return transport.put<FormData, IUser>(\"/user/avatar\", transport.formatToFormData(data));\r\n}\r\n\r\nexport function deleteAvatar() {\r\n    return transport.delete<IUser>(\"/user/avatar\")\r\n}\r\n\r\nexport function changePassword(data: IChangePassword) {\r\n    return transport.put<IChangePassword, undefined>(\"/user/password\", data);\r\n}\r\n","import {transport} from \"../service\";\r\nimport {ICreatePost, IPost} from \"../entity\";\r\n\r\nexport function fetchList() {\r\n    return transport.get<IPost[]>(\"/post\");\r\n}\r\n\r\nexport function fetchOne(id: number) {\r\n    return transport.get<IPost>(`/post/${id}`);\r\n}\r\n\r\nexport function createPost(data: ICreatePost) {\r\n    return transport.post<FormData, {id: number}>(\"/post\", transport.formatToFormData(data));\r\n}\r\n\r\nexport function editPost(id: number, data: Partial<IPost>) {\r\n    return transport.put<FormData, undefined>(`/post/${id}`, transport.formatToFormData(data));\r\n}\r\n\r\nexport function deletePost(id: number) {\r\n    return transport.delete<undefined>(`/post/${id}`);\r\n}\r\n","import {transport} from \"../service\";\r\nimport {IComment, TCreateComment} from \"../entity\";\r\n\r\nexport function getList(postId: number) {\r\n    return transport.get<IComment[]>(`/comment/${postId}/list`);\r\n}\r\n\r\nexport function createComment(data: TCreateComment) {\r\n    return transport.post<TCreateComment, undefined>(\"/comment\", data);\r\n}\r\n\r\nexport function editComment(id: number, data: Partial<IComment>) {\r\n    return transport.put<Partial<IComment>, undefined>(`/comment/${id}`, data);\r\n}\r\n\r\nexport function deleteComment(id: number) {\r\n    return transport.delete<undefined>(`/comment/${id}`);\r\n}\r\n","import {IResponseMessage, ISignInData, ISignUpData, IUser, TResponse} from \"../entity\";\nimport { useCallback } from \"react\";\nimport { AuthAPI } from \"../api\";\n\nexport function useAuth(): {\n    signIn: (data: ISignInData) => Promise<TResponse<{token: string}>>;\n    signUp: (data: ISignInData) => Promise<TResponse<IResponseMessage>>;\n    forgotPassword: (data: { email: string }) => Promise<TResponse<IResponseMessage>>;\n    login: () => Promise<TResponse<IUser>>;\n} {\n    const signIn = useCallback((data: ISignInData) => {\n        return AuthAPI.signIn(data);\n    }, []);\n\n    const signUp = useCallback((data: ISignUpData) => {\n        return AuthAPI.signUp(data);\n    }, []);\n\n    const forgotPassword = useCallback((data: { email: string }) => {\n        return AuthAPI.forgotPassword(data);\n    }, []);\n\n    const login = useCallback(() => {\n        return AuthAPI.login();\n    }, []);\n\n    return { signIn, forgotPassword, signUp, login };\n}\n","import { useSnackbar } from \"notistack\";\r\n\r\nexport function useCustomSnackbar(): {\r\n    showSuccessSnackbar: (message: string) => void;\r\n    showErrorSnackbar: (message: string) => void;\r\n    showDefaultSnackbar: (message: string) => void;\r\n    showWarningSnackbar: (message: string) => void;\r\n    showInfoSnackbar: (message: string) => void;\r\n} {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    return {\r\n        showErrorSnackbar: (message) => enqueueSnackbar(message, { variant: \"error\" }),\r\n        showSuccessSnackbar: (message) => enqueueSnackbar(message, { variant: \"success\" }),\r\n        showDefaultSnackbar: (message) => enqueueSnackbar(message, { variant: \"default\" }),\r\n        showWarningSnackbar: (message) => enqueueSnackbar(message, { variant: \"warning\" }),\r\n        showInfoSnackbar: (message) => enqueueSnackbar(message, { variant: \"info\" }),\r\n    }\r\n}\r\n","import { AxiosError, AxiosResponse } from \"axios\";\r\nimport {IServerError, TServerError} from \"../entity\";\r\n\r\nexport function getServerError(error: AxiosError): IServerError | undefined {\r\n    const response = error.response as AxiosResponse<TServerError>;\r\n    if (!response) {\r\n        return undefined;\r\n    }\r\n    return response.data.error;\r\n}\r\n","import { head, last, get } from \"lodash\";\r\nimport fileType from \"file-type\";\r\n\r\nexport function dataURLtoFile(dataurl: string, filename: string): File {\r\n    const type = head(dataurl.split(\",\"));\r\n    const src = last(dataurl.split(\",\"));\r\n\r\n    const mime = last(type!.match(/:(.*?);/));\r\n    const byteString = atob(src!);\r\n    let n = byteString.length;\r\n    const u8arr = new Uint8Array(n);\r\n    while (n) {\r\n        u8arr[n - 1] = byteString.charCodeAt(n - 1);\r\n        n -= 1; // to make eslint happy\r\n    }\r\n    const blob = new Blob([u8arr], { type: mime });\r\n    const file = new File([blob], filename, { type: mime });\r\n    return file;\r\n}\r\n\r\nexport function getExtension(resolve: (ext: string) => void, file: File): void {\r\n    const reader = new FileReader();\r\n    if (!file) {\r\n        return;\r\n    }\r\n    reader.readAsArrayBuffer(file);\r\n    (reader.onloadend = () => {\r\n        const result = reader.result as ArrayBuffer;\r\n        const ext = get(fileType(result), \"ext\", \"\");\r\n        resolve(ext);\r\n    });\r\n}\r\n\r\nexport function getUnsafeExtension(file: File): string {\r\n    return (last(file.name.split(\".\")) || \"\").toLowerCase();\r\n}\r\n","import { ICreatePost, IPost, TResponse } from \"../entity\";\nimport { useCallback, useState } from \"react\";\nimport { PostAPI } from \"../api\";\n\nexport function usePost(): {\n    posts: IPost[];\n    post: IPost | undefined;\n    getPostList: () => Promise<void>;\n    getPost: (id: number) => Promise<void>;\n    createPost: (data: ICreatePost) => Promise<TResponse<{ id: number }>>;\n    editPost: (id: number, data: Partial<IPost>) => Promise<void>;\n    deletePost: (id: number) => Promise<TResponse<undefined>>;\n} {\n    const [posts, setPosts] = useState<IPost[]>([]);\n    const [post, setPost] = useState<IPost | undefined>(undefined);\n\n    const getPostList = useCallback(() => {\n        return PostAPI.fetchList().then((response) => setPosts(response.data));\n    }, []);\n\n    const getPost = useCallback((id: number) => {\n        return PostAPI.fetchOne(id).then((response) => setPost(response.data));\n    }, []);\n\n    const createPost = useCallback((data: ICreatePost) => {\n        return PostAPI.createPost(data);\n    }, []);\n\n    const editPost = useCallback((id: number, data: Partial<IPost>) => {\n        return PostAPI.editPost(id, data).then(() => getPost(id));\n    }, []);\n\n    const deletePost = useCallback((id: number) => {\n        return PostAPI.deletePost(id);\n    }, []);\n\n    return { posts, post, createPost, deletePost, editPost, getPost, getPostList };\n}\n","import React, { useState } from \"react\";\nimport { Popup } from \"../../components/popup\";\nimport { ISignInData, ISignUpData, IUser } from \"../../entity\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { TextField } from \"../../components/text-field\";\nimport { css, cx } from \"emotion\";\nimport { CustomForm } from \"../../components/custom-form\";\nimport * as Yup from \"yup\";\nimport { useAuth, useCustomSnackbar } from \"../../hooks\";\nimport { getServerError } from \"../../utils\";\nimport { transport } from \"../../service\";\n\ninterface Props {\n    open: boolean;\n\n    onClose?(): void;\n\n    setUser(user: IUser): void;\n}\n\nconst signInValidationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Некорректный e-mail\").required(\"Обязательно для заполнения\"),\n    password: Yup.string()\n        .required(\"Обязательно для заполнения\")\n        .min(6, \"Пароль должен быть не меньше 6 символов\"),\n});\n\nconst signUpValidationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Некорректный e-mail\").required(\"Обязательно для заполнения\"),\n    login: Yup.string()\n        .required(\"Обязательно для заполнения\")\n        .min(4, \"Пароль должен быть не меньше 4 символов\"),\n    password: Yup.string()\n        .required(\"Обязательно для заполнения\")\n        .length(6, \"Пароль должен быть не меньше 6 символов\"),\n});\n\nconst forgotPasswordValidationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Некорректный e-mail\").required(\"Обязательно для заполнения\"),\n});\n\nconst styles = {\n    card: css`\n        padding: 20px;\n        display: grid;\n        grid-template-columns: 1fr;\n        grid-row-gap: 20px;\n    `,\n    footer: css`\n        display: flex;\n    `,\n    link: css`\n        text-decoration: none;\n        color: #3f51b5;\n        cursor: pointer;\n        :hover {\n            text-decoration: underline;\n        }\n    `,\n};\n\nexport const AuthPopup = (props: Props) => {\n    const { open, onClose, setUser } = props;\n    const [mode, setMode] = useState<\"signIn\" | \"signUp\" | \"forgotPassword\">(\"signIn\");\n    const popupTitle = new Map([\n        [\"signIn\", \"Войти\"],\n        [\"signUp\", \"Регистрация\"],\n        [\"forgotPassword\", \"Восстановить пароль\"],\n    ]);\n    const { signUp, signIn, forgotPassword, login } = useAuth();\n    const { showErrorSnackbar, showSuccessSnackbar } = useCustomSnackbar();\n\n    const handleSignIn = (data: ISignInData) => {\n        signIn(data)\n            .then((response) => {\n                transport.setToken(response.data.token);\n                login()\n                    .then((response) => {\n                        setUser(response.data);\n                        onClose();\n                    })\n                    .catch(() => showErrorSnackbar(\"Ошибка сервера. Попробуйте позже\"));\n            })\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    const handleSignUp = (data: ISignUpData) => {\n        signUp(data)\n            .then(() => showSuccessSnackbar(\"Вы успешно зарегистрированы!\"))\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    const handleForgotPassword = (data: { email: string }) => {\n        forgotPassword(data)\n            .then(() => {\n                showSuccessSnackbar(\"Пароль успешно отправлен\");\n            })\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    return (\n        <Popup open={open} onClose={onClose} title={popupTitle.get(mode)}>\n            {mode === \"signIn\" && (\n                <CustomForm<ISignInData>\n                    onSubmit={handleSignIn}\n                    validationSchema={signInValidationSchema}\n                    render={(form) => (\n                        <div className={styles.card}>\n                            <TextField name={\"email\"} label={\"Email\"} />\n                            <TextField name={\"password\"} label={\"Пароль\"} type={\"password\"} />\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={form?.submitForm}\n                                disabled={!form.isValid}\n                            >\n                                Войти\n                            </Button>\n                            <div className={styles.footer}>\n                                <div className={styles.link} onClick={() => setMode(\"signUp\")}>\n                                    Регистрация\n                                </div>\n                                <div\n                                    onClick={() => setMode(\"forgotPassword\")}\n                                    className={cx(\n                                        styles.link,\n                                        css`\n                                            margin-left: auto;\n                                        `,\n                                    )}\n                                >\n                                    Не могу вспомнить пароль\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                />\n            )}\n            {mode === \"signUp\" && (\n                <CustomForm<ISignUpData>\n                    onSubmit={handleSignUp}\n                    validationSchema={signUpValidationSchema}\n                    render={(form) => (\n                        <div className={styles.card}>\n                            <TextField name={\"login\"} label={\"Логин\"} />\n                            <TextField name={\"email\"} label={\"Email\"} />\n                            <TextField name={\"password\"} label={\"Пароль\"} type={\"password\"} />\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={form?.submitForm}\n                                disabled={!form.isValid}\n                            >\n                                Регистрация\n                            </Button>\n                            <div className={styles.footer}>\n                                <div className={styles.link} onClick={() => setMode(\"signIn\")}>\n                                    Войти\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                />\n            )}\n            {mode === \"forgotPassword\" && (\n                <CustomForm<{ email: string }>\n                    onSubmit={handleForgotPassword}\n                    validationSchema={forgotPasswordValidationSchema}\n                    render={(form) => (\n                        <div className={styles.card}>\n                            <Typography variant={\"h6\"} align={\"center\"}>\n                                На введенный е-mail мы отправим новый пароль\n                            </Typography>\n                            <TextField name={\"email\"} label={\"Email\"} />\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={form?.submitForm}\n                                disabled={!form.isValid}\n                            >\n                                Отправить\n                            </Button>\n                            <div className={styles.footer}>\n                                <div className={styles.link} onClick={() => setMode(\"signUp\")}>\n                                    Регистрация\n                                </div>\n                                <div\n                                    onClick={() => setMode(\"signIn\")}\n                                    className={cx(\n                                        styles.link,\n                                        css`\n                                            margin-left: auto;\n                                        `,\n                                    )}\n                                >\n                                    Войти\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                />\n            )}\n        </Popup>\n    );\n};\n","import React, { FC } from \"react\";\r\nimport { IPopupProps, Popup } from \"../popup\";\r\nimport { Button, DialogActions } from \"@material-ui/core\";\r\nimport { css } from \"emotion\";\r\n\r\ninterface IConfirmPopupProps extends IPopupProps {\r\n    submitTitle?: string;\r\n    cancelTitle?: string;\r\n\r\n    onSubmit?(): void;\r\n}\r\n\r\nconst styles = {\r\n    button: css`\r\n        margin-right: 20px;\r\n    `,\r\n    actions: css`\r\n        padding: 16px 24px !important;\r\n    `\r\n};\r\n\r\nexport const ConfirmPopup: FC<IConfirmPopupProps> = (props) => {\r\n    const {\r\n        onClose,\r\n        open,\r\n        title,\r\n        onSubmit,\r\n        cancelTitle = \"Отмена\",\r\n        submitTitle = \"Ок\",\r\n    } = props;\r\n    return (\r\n        <Popup open={open} title={title} onClose={onClose}>\r\n            <DialogActions className={styles.actions}>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    onClick={onClose}\r\n                    className={styles.button}\r\n                >\r\n                    {cancelTitle}\r\n                </Button>\r\n                <Button variant=\"outlined\" color={\"primary\"} onClick={onSubmit}>\r\n                    {submitTitle}\r\n                </Button>\r\n            </DialogActions>\r\n        </Popup>\r\n    );\r\n};\r\n","import React, { useContext, useState } from \"react\";\nimport { UserContext } from \"../../app\";\nimport { AppContext } from \"../../context\";\nimport { Avatar, Button, IconButton, Tooltip } from \"@material-ui/core\";\nimport { AccountCircle } from \"@material-ui/icons\";\nimport { Menu } from \"../menu\";\nimport { AuthPopup } from \"../../widgets/auth-popup\";\nimport { ConfirmPopup } from \"../confirm-popup\";\nimport { css } from \"emotion\";\nimport { Container } from \"../container\";\nimport { Link } from \"react-router-dom\";\nimport {transport} from \"../../service\";\n\nconst styles = {\n    header: css`\n        width: 100%;\n        height: 80px;\n        background: #fff;\n        border-bottom: 1px solid #ccc;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        box-sizing: border-box;\n    `,\n    content: css`\n        height: calc(100vh - 80px);\n        overflow: auto;\n        background: rgb(247, 249, 252);\n    `,\n    inner: css`\n        width: 1200px;\n        margin: 0 auto;\n        padding: 40px 0;\n    `,\n    profile: css`\n        margin-left: auto;\n    `,\n    link: css`\n        text-decoration: none;\n    `,\n    image: css`\n        height: 60px;\n    `,\n};\n\nconst LOGO = require(\"./logo.png\");\n\nexport const Header = () => {\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const isMenuOpen = Boolean(anchorEl);\n    const userContext = useContext(UserContext);\n    const [logoutPopupVisible, setLogoutPopupVisible] = useState(false);\n    const [authPopup, setAuthPopup] = useState(false);\n\n    function onOpenLogoutPopup(): void {\n        setLogoutPopupVisible(true);\n    }\n\n    function onCloseLogoutPopup(): void {\n        setLogoutPopupVisible(false);\n        handleMenuClose();\n    }\n\n    const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n    const logout = () => {\n        handleMenuClose();\n        localStorage.removeItem(\"token\");\n        userContext.setUser(undefined);\n        transport.setToken(undefined);\n        onCloseLogoutPopup();\n        AppContext.getHistory().push(`/`);\n    };\n\n    const goTo = (path: string) => {\n        AppContext.getHistory().push(`/${path}`);\n        handleMenuClose();\n    };\n    return (\n        <>\n            <div className={styles.header}>\n                <Container\n                    className={css`\n                        display: flex;\n                        align-items: center;\n                    `}\n                >\n                    <Link to={\"/\"} className={styles.link}>\n                        <img src={LOGO} alt=\"\" className={styles.image} />\n                    </Link>\n                    <div className={styles.profile}>\n                        {userContext.user ? (\n                            <>\n                                <Tooltip\n                                    title={userContext.user?.login || userContext.user?.email || \"\"}\n                                >\n                                    <IconButton onClick={handleProfileMenuOpen} color={\"inherit\"}>\n                                        {userContext.user?.avatar ? (\n                                            <Avatar src={userContext.user?.avatar} />\n                                        ) : (\n                                            <AccountCircle />\n                                        )}\n                                    </IconButton>\n                                </Tooltip>\n                                <Menu\n                                    anchor={anchorEl}\n                                    open={isMenuOpen}\n                                    onClose={handleMenuClose}\n                                    options={[\n                                        {\n                                            value: \"Профиль\",\n                                            handler: () => goTo(\"profile\"),\n                                        },\n                                        {\n                                            value: \"Выход\",\n                                            handler: onOpenLogoutPopup,\n                                        },\n                                    ]}\n                                />\n                            </>\n                        ) : (\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => setAuthPopup(true)}\n                            >\n                                Войти\n                            </Button>\n                        )}\n                    </div>\n                </Container>\n            </div>\n            <AuthPopup\n                open={authPopup}\n                setUser={userContext.setUser}\n                onClose={() => setAuthPopup(false)}\n            />\n            <ConfirmPopup\n                open={logoutPopupVisible}\n                title={\"Вы действительно хотите выйти?\"}\n                onClose={onCloseLogoutPopup}\n                onSubmit={logout}\n            />\n        </>\n    );\n};\n","import React from \"react\";\nimport { IPost } from \"../../entity\";\nimport { css } from \"emotion\";\nimport {\n    Card,\n    CardActionArea,\n    CardContent,\n    CardMedia,\n    Typography,\n} from \"@material-ui/core\";\nimport { AppContext } from \"../../context\";\n\ninterface Props {\n    post: IPost;\n}\n\nconst styles = {\n    description: css`\n        height: 40px;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    `,\n    image: css`\n        height: 180px;\n    `,\n};\n\nexport const PostPreview = (props: Props) => {\n    const { post } = props;\n\n    const more = () => {\n        AppContext.getHistory().push(`/post/${post.id}`);\n    };\n\n    return (\n        <Card variant={\"outlined\"} onClick={more}>\n            <CardActionArea>\n                <CardMedia image={post.background} title={post.title} className={styles.image} />\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {post.title}\n                    </Typography>\n                    <Typography\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"p\"\n                        className={styles.description}\n                    >\n                        {post.text}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { Container } from \"../components/container\";\nimport { Header } from \"../components/header\";\nimport { Button } from \"@material-ui/core\";\nimport { css } from \"emotion\";\nimport { Add } from \"@material-ui/icons\";\nimport { UserContext } from \"../app\";\nimport { usePost } from \"../hooks\";\nimport { PostPreview } from \"../components/post-preview\";\nimport { AppContext } from \"../context\";\n\nconst styles = {\n    header: css`\n        margin-bottom: 40px;\n    `,\n    posts: css`\n        display: grid;\n        grid-template-columns: 1fr 1fr 1fr;\n        grid-column-gap: 40px;\n        grid-row-gap: 40px;\n    `,\n};\n\nexport const Main = () => {\n    const userContext = useContext(UserContext);\n    const { posts, getPostList } = usePost();\n\n    useEffect(() => {\n        getPostList();\n    }, []);\n\n    const onAddPost = () => {\n        AppContext.getHistory().push(\"/post/create\");\n    };\n\n    return (\n        <>\n            <Header />\n            <Container>\n                {userContext.user && (\n                    <div className={styles.header}>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            startIcon={<Add />}\n                            onClick={onAddPost}\n                        >\n                            Создать пост\n                        </Button>\n                    </div>\n                )}\n                <div className={styles.posts}>\n                    {posts.map((item, index) => (\n                        <PostPreview post={item} key={index} />\n                    ))}\n                </div>\n            </Container>\n        </>\n    );\n};\n","import * as React from \"react\";\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\n\ninterface IPrivateRouteProps extends RouteProps {\n    auth: boolean;\n    render: (props: RouteComponentProps) => React.ReactNode;\n}\n\nexport const PrivateRoute = (props: IPrivateRouteProps) => {\n    const { render, auth, ...rest } = props;\n    return (\n        <Route\n            {...rest}\n            render={(routeProps: RouteComponentProps) =>\n                auth ? render(routeProps) : <Redirect exact to={\"/\"} />\n            }\n        />\n    );\n};\n","import { jssPreset, StylesProvider } from \"@material-ui/styles\";\r\nimport { create } from \"jss\";\r\nimport * as React from \"react\";\r\n\r\nconst insertionPoint = document.getElementById(\"jss-insertion-point\");\r\n\r\nconst jss = create({\r\n    ...jssPreset(),\r\n    insertionPoint: insertionPoint!,\r\n});\r\n\r\nexport const JssProvider: React.FC = ({ children }) => {\r\n    return <StylesProvider jss={jss}>{children}</StylesProvider>;\r\n};\r\n\r\nJssProvider.displayName = \"JssProvider\";\r\n","import React from \"react\";\r\nimport { css } from \"emotion\";\r\nimport cn from \"classnames\";\r\n\r\nconst DEFAULT = require(\"./user.svg\");\r\n\r\ninterface IAvatarProps {\r\n    url?: string;\r\n    name?: string\r\n    className?: string;\r\n}\r\n\r\nconst styles = {\r\n    wrapper: css`\r\n        width: 200px;\r\n        height: 200px;\r\n        overflow: hidden;\r\n        border-radius: 50%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    `,\r\n    image: css`\r\n        width: 100%;\r\n        height: 100%;\r\n    `\r\n};\r\n\r\nexport const Avatar = (props: IAvatarProps) => {\r\n    const { url, name, className } = props;\r\n    return (\r\n        <div className={cn(styles.wrapper, className)}>\r\n            <img src={url || DEFAULT} alt={name} className={styles.image}/>\r\n        </div>\r\n    );\r\n};\r\n","import React, { ChangeEvent, useEffect, useRef, useState } from \"react\";\nimport { css, cx } from \"emotion\";\nimport { Button, IconButton, LinearProgress, Typography } from \"@material-ui/core\";\nimport { Close, CloudUpload, Edit } from \"@material-ui/icons\";\nimport { ConfirmPopup } from \"../../components\";\nimport { useFile } from \"../../hooks\";\nimport { useFormikContext } from \"formik\";\n\ninterface IUploadAvatarProps {\n    src?: string;\n    loading?: boolean;\n    imageClassName?: string;\n    name: string;\n    buttonVisible?: boolean;\n\n    onDeleteAvatar?(): void;\n\n    uploadAvatar?(file: File): void;\n}\n\nconst styles = {\n    wrapper: css`\n        position: relative;\n        padding-top: 40px;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    `,\n    icons: css`\n        position: absolute !important;\n        right: 0;\n        top: 0;\n    `,\n    icon: css`\n        margin-right: 10px;\n        :last-child {\n            margin-right: 0;\n        }\n    `,\n    avatar: css`\n        margin: 20px 0;\n    `,\n    button: css`\n        width: 100%;\n    `,\n    input: css`\n        display: none;\n    `,\n    progress: css`\n        width: 100%;\n        margin-top: 20px;\n    `,\n    error: css`\n        margin-top: 20px !important;\n    `,\n};\n\nexport const UploadAvatar = (props: IUploadAvatarProps) => {\n    const {\n        onDeleteAvatar,\n        uploadAvatar,\n        loading,\n        imageClassName,\n        name,\n        buttonVisible = true,\n    } = props;\n    const [modalOpen, setModalOpen] = useState(false);\n    const inputRef = useRef<HTMLInputElement>(null);\n    const { src, file, error, setSrc, deleteFile, loadFile } = useFile({\n        whiteList: [\"png\", \"jpg\", \"pdf\", \"gif\", \"jpeg\"],\n        maxFileSize: 1048576,\n    });\n    const { setFieldValue } = useFormikContext();\n\n    useEffect(() => {\n        setSrc(props.src);\n        setSrc(props.src);\n    }, [props.src, setSrc]);\n\n    useEffect(() => {\n        if (setFieldValue) {\n            setFieldValue(name, src);\n        }\n    }, [src]);\n\n    function onModalOpen(): void {\n        setModalOpen(true);\n    }\n\n    function onModalClose(): void {\n        setModalOpen(false);\n    }\n\n    const onChoseFile = () => {\n        if (!inputRef.current) {\n            return;\n        }\n        inputRef.current.click();\n    };\n\n    const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.item(0);\n        if (!file) {\n            return;\n        }\n        loadFile(file);\n        setFieldValue(\"file\", file);\n    };\n\n    const deleteAvatar = () => {\n        deleteFile();\n        onModalClose();\n        if (onDeleteAvatar) {\n            onDeleteAvatar();\n        }\n    };\n\n    const onUploadAvatar = () => {\n        if (!uploadAvatar || !file) {\n            return;\n        }\n        uploadAvatar(file);\n    };\n\n    return (\n        <>\n            <div className={styles.wrapper}>\n                <div className={styles.icons}>\n                    <IconButton className={styles.icon} onClick={onChoseFile}>\n                        <Edit />\n                    </IconButton>\n                    {src && (\n                        <IconButton className={styles.icon} onClick={onModalOpen}>\n                            <Close />\n                        </IconButton>\n                    )}\n                </div>\n                <img src={src} className={cx(styles.avatar, imageClassName)} alt={\"\"} />\n                {buttonVisible && (\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        startIcon={<CloudUpload />}\n                        className={styles.button}\n                        onClick={onUploadAvatar}\n                        disabled={loading}\n                    >\n                        Загрузить\n                    </Button>\n                )}\n                {error && (\n                    <Typography color={\"error\"} align={\"center\"} className={styles.error}>\n                        {error}\n                    </Typography>\n                )}\n                <input type=\"file\" className={styles.input} ref={inputRef} onChange={onChange} />\n            </div>\n            {loading && <LinearProgress className={styles.progress} />}\n            <ConfirmPopup\n                title={\"Вы действительно хотите удалить аватар?\"}\n                submitTitle={\"Удалить\"}\n                open={modalOpen}\n                onClose={onModalClose}\n                onSubmit={deleteAvatar}\n            />\n        </>\n    );\n};\n","import { Dispatch, SetStateAction, useState } from \"react\";\r\nimport { fromEvent } from \"rxjs/internal/observable/fromEvent\";\r\nimport { dataURLtoFile, getExtension, getUnsafeExtension } from \"../utils\";\r\n\r\nexport interface IFileServiceParams {\r\n    maxFileSize: number;\r\n    whiteList: string[];\r\n}\r\n\r\nexport function useFile(\r\n    params: IFileServiceParams,\r\n): {\r\n    file?: File;\r\n    src?: string;\r\n    setSrc: Dispatch<SetStateAction<string | undefined>>\r\n    error?: string;\r\n    setError: Dispatch<SetStateAction<string | undefined>>\r\n    loadFile: (file: File) => Promise<void>;\r\n    deleteFile: () => void;\r\n} {\r\n    const [file, setFile] = useState<File | undefined>(undefined);\r\n    const [src, setSrc] = useState<string | undefined>(undefined);\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n\r\n    const loadFile = async (f: File) => {\r\n        if (!!(await getError(f))) {\r\n            setError(await getError(f));\r\n            return;\r\n        }\r\n        setError(undefined);\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(f);\r\n        fromEvent(reader, \"loadend\").subscribe(async () => {\r\n            try {\r\n                setSrc(reader.result as string);\r\n                setFile(dataURLtoFile(reader.result as string, f.name));\r\n            } catch (error) {\r\n                // Nothing here\r\n            }\r\n        });\r\n    };\r\n\r\n    const getError = async (file: File): Promise<string | undefined> => {\r\n        if (file.size > params.maxFileSize) {\r\n            return `Размер файла не должен превышать ${params.maxFileSize / (1024 * 1024)}МБ !`;\r\n        }\r\n        const ext = await new Promise((resolve: (ext: string) => void) =>\r\n            getExtension(resolve, file),\r\n        );\r\n        if (params.whiteList.indexOf(ext) < 0) {\r\n            return `Файл этого типа не может быть загружен. Разрешенные расширения: ${params.whiteList.join(\", \")}`;\r\n        }\r\n        if (getUnsafeExtension(file) !== ext) {\r\n            return \"Тип файла не соответствует его расширению. Пожалуйста, повторите попытку.\";\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    const deleteFile = () => {\r\n        setSrc(undefined);\r\n        setFile(undefined);\r\n        setError(undefined);\r\n    };\r\n\r\n    return { file, src, error, loadFile, deleteFile, setSrc, setError };\r\n}\r\n","import React, { useContext } from \"react\";\nimport { Container } from \"../components/container\";\nimport { Header } from \"../components/header\";\nimport { css } from \"emotion\";\nimport { UserContext } from \"../app\";\nimport { UploadAvatar } from \"../components/upload-avatar\";\nimport { CustomForm } from \"../components/custom-form\";\nimport { IChangePassword, IUser } from \"../entity\";\nimport { TextField } from \"../components/text-field\";\nimport { Button, Card, Typography } from \"@material-ui/core\";\nimport { isEqual, omit } from \"lodash\";\nimport { useCustomSnackbar, useUser } from \"../hooks\";\nimport { equalTo, getServerError } from \"../utils\";\nimport * as Yup from \"yup\";\n\nconst styles = {\n    content: css`\n        padding: 40px 0;\n        display: grid;\n        grid-template-columns: 300px 1fr 1fr;\n        grid-column-gap: 40px;\n        align-items: flex-start;\n    `,\n    avatar: css`\n        padding: 20px;\n    `,\n    image: css`\n        height: 300px;\n    `,\n    form: css`\n        display: grid;\n        grid-template-columns: 1fr;\n        grid-row-gap: 30px;\n        padding: 20px;\n    `,\n};\n\nconst changeUserDataValidationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Некорректный e-mail\").required(\"Обязательно для заполнения\"),\n    login: Yup.string()\n        .required(\"Обязательно для заполнения\")\n        .min(4, \"Пароль должен быть не меньше 4 символов\"),\n});\n\nYup.addMethod(Yup.string, \"equalTo\", equalTo);\n\nconst changePasswordValidationSchema = Yup.object().shape({\n    password: Yup.string()\n        .min(6, \"Пароль должен сожержать минимум 6 символов\")\n        .required(\"Поле обязательно для заполнения\"),\n    newPassword: Yup.string()\n        .equalTo(Yup.ref(\"repeatPassword\"), \"Новый пароль и повтор пароля должны совпадать\")\n        .min(6, \"Пароль должен сожержать минимум 6 символов\")\n        .required(\"Поле обязательно для заполнения\"),\n    repeatPassword: Yup.string()\n        .equalTo(Yup.ref(\"newPassword\"), \"Новый пароль и повтор пароля должны совпадать\")\n        .min(6, \"Пароль должен сожержать минимум 6 символов\")\n        .required(\"Поле обязательно для заполнения\"),\n});\n\nexport const Profile = () => {\n    const userContext = useContext(UserContext);\n    const { uploadAvatar, updateUser, deleteAvatar, changePassword } = useUser();\n    const { showErrorSnackbar, showSuccessSnackbar } = useCustomSnackbar();\n\n    const handleAvatar = (file: File) => {\n        uploadAvatar({ avatar: file })\n            .then((response) => {\n                userContext.setUser(response.data);\n                showSuccessSnackbar(\"Успешно загружено\");\n            })\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    const handleDeleteAvatar = () => {\n        deleteAvatar()\n            .then((response) => {\n                userContext.setUser(response.data);\n                showSuccessSnackbar(\"Успешно удалено\");\n            })\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    const handleUpdateUser = (data: Partial<IUser>) => {\n        updateUser(omit(data, [\"avatar\"]))\n            .then((response) => {\n                userContext.setUser(response.data);\n                showSuccessSnackbar(\"Успешно обновлено\");\n            })\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    const handleChangePassword = (data: IChangePassword) => {\n        changePassword(data)\n            .then(() => showSuccessSnackbar(\"Успешно обновлено\"))\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    return (\n        <>\n            <Header />\n            <Container>\n                <Typography\n                    variant={\"h3\"}\n                    className={css`\n                        margin-top: 40px !important;\n                    `}\n                >\n                    Профиль пользователя {userContext.user.login}\n                </Typography>\n                <div className={styles.content}>\n                    <CustomForm<Partial<IUser>>\n                        data={userContext.user}\n                        validationSchema={changeUserDataValidationSchema}\n                        onSubmit={handleUpdateUser}\n                        render={(form) => (\n                            <>\n                                <Card className={styles.avatar} variant={\"outlined\"}>\n                                    <UploadAvatar\n                                        src={userContext.user.avatar}\n                                        onDeleteAvatar={handleDeleteAvatar}\n                                        uploadAvatar={handleAvatar}\n                                        imageClassName={styles.image}\n                                        name={\"avatar\"}\n                                    />\n                                </Card>\n                                <Card className={styles.form} variant={\"outlined\"}>\n                                    <Typography variant={\"h5\"}>Изменить данные</Typography>\n                                    <TextField\n                                        name={\"email\"}\n                                        label={\"Email\"}\n                                        InputLabelProps={{ shrink: !!form?.values?.login }}\n                                    />\n                                    <TextField\n                                        name={\"login\"}\n                                        label={\"Логин\"}\n                                        InputLabelProps={{ shrink: !!form?.values?.login }}\n                                    />\n                                    <Button\n                                        fullWidth\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={form?.submitForm}\n                                        disabled={\n                                            !form.isValid || isEqual(form?.values, form?.initialValues)\n                                        }\n                                    >\n                                        Сохранить\n                                    </Button>\n                                </Card>\n                            </>\n                        )}\n                    />\n                    <CustomForm<IChangePassword>\n                        onSubmit={handleChangePassword}\n                        validationSchema={changePasswordValidationSchema}\n                        render={(form) => (\n                            <Card variant={\"outlined\"} className={styles.form}>\n                                <Typography variant={\"h5\"}>Изменить пароль</Typography>\n                                <TextField name={\"password\"} label={\"Текущий пароль\"} />\n                                <TextField name={\"newPassword\"} label={\"Новый пароль\"} />\n                                <TextField name={\"repeatPassword\"} label={\"Повтор пароля\"} />\n                                <Button\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={form?.submitForm}\n                                    disabled={\n                                        !form.isValid || isEqual(form?.values, form?.initialValues)\n                                    }\n                                >\n                                    Сохранить\n                                </Button>\n                            </Card>\n                        )}\n                    />\n                </div>\n            </Container>\n        </>\n    );\n};\n","import { StringSchema } from \"yup\";\nimport * as Yup from \"yup\";\n\nexport function equalTo(ref: any, msg: any): StringSchema {\n    return Yup.string().test({\n        name: \"equalTo\",\n        exclusive: false,\n        message: msg,\n        params: {\n            reference: ref.path,\n        },\n        test: function (value: any) {\n            return value === this.resolve(ref);\n        },\n    });\n}\n","import {IChangePassword, IUpdateAvatar, IUser, TResponse} from \"../entity\";\nimport {useCallback, useState} from \"react\";\nimport { UserAPI } from \"../api\";\n\nexport function useUser(): {\n    user: IUser | undefined;\n    getUser: () => Promise<void>;\n    updateUser: (user: Partial<IUser>) => Promise<TResponse<IUser>>;\n    uploadAvatar: (data: IUpdateAvatar) => Promise<TResponse<IUser>>;\n    deleteAvatar: () => Promise<TResponse<IUser>>;\n    changePassword: (data: IChangePassword) => Promise<TResponse<undefined>>;\n} {\n    const [user, setUser] = useState<IUser | undefined>(undefined);\n\n    const getUser = useCallback(() => {\n        return UserAPI.getUser().then((response) => setUser(response.data));\n    }, []);\n\n    const updateUser = useCallback((user: Partial<IUser>) => {\n        return UserAPI.editUser(user);\n    }, []);\n\n    const uploadAvatar = useCallback((data: IUpdateAvatar) => {\n        return UserAPI.uploadAvatar(data);\n    }, []);\n\n    const deleteAvatar = useCallback(() => {\n        return UserAPI.deleteAvatar();\n    }, []);\n\n    const changePassword = useCallback((data: IChangePassword) => {\n        return UserAPI.changePassword(data);\n    }, []);\n\n    return { user, deleteAvatar, getUser, updateUser, uploadAvatar, changePassword };\n}\n","import React from \"react\";\nimport { Header } from \"../components/header\";\nimport { Container } from \"../components/container\";\nimport { UploadAvatar } from \"../components/upload-avatar\";\nimport { css } from \"emotion\";\nimport { CustomForm } from \"../components/custom-form\";\nimport { TextField } from \"../components/text-field\";\nimport * as Yup from \"yup\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { useCustomSnackbar, usePost } from \"../hooks\";\nimport { ICreatePost } from \"../entity\";\nimport { get, omit } from \"lodash\";\nimport { getServerError } from \"../utils\";\nimport { AppContext } from \"../context\";\n\nconst validationSchema = Yup.object().shape({\n    title: Yup.string().required(\"Обязательно для заполнения\"),\n    text: Yup.string().required(\"Обязательно для заполнения\"),\n    background: Yup.string().required(\"Обязательно для заполнения\"),\n});\n\nconst styles = {\n    content: css`\n        display: grid;\n        grid-template-columns: 400px 1fr;\n        grid-column-gap: 30px;\n    `,\n    background: css`\n        width: 400px;\n    `,\n    backgroundImage: css`\n        width: 400px;\n        height: 300px;\n    `,\n    fields: css`\n        margin-top: 45px;\n    `,\n    footer: css`\n        position: fixed;\n        width: 100%;\n        bottom: 0;\n        height: 80px;\n        border-top: 1px solid #ccc;\n    `,\n    footerContent: css`\n        height: 80px;\n        display: flex;\n        align-items: center;\n        justify-content: flex-end;\n        padding: 0;\n    `,\n    imageError: css`\n        margin-top: 20px !important;\n    `,\n};\n\nexport const CreatePost = () => {\n    const { createPost } = usePost();\n    const { showErrorSnackbar } = useCustomSnackbar();\n\n    const onSubmit = (data: ICreatePost) => {\n        createPost(omit(data, [\"background\"]) as ICreatePost)\n            .then((response) => AppContext.getHistory().push(`/post/${response.data.id}`))\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    return (\n        <>\n            <Header />\n            <CustomForm<ICreatePost>\n                validationSchema={validationSchema}\n                validateOnBlur={false}\n                validateOnChange={false}\n                onSubmit={onSubmit}\n                render={(form) => (\n                    <>\n                        <Container className={styles.content}>\n                            <div className={styles.background}>\n                                <UploadAvatar\n                                    imageClassName={styles.backgroundImage}\n                                    name={\"background\"}\n                                    buttonVisible={false}\n                                />\n                                {get(form.errors, \"background\") && (\n                                    <Typography color={\"error\"} className={styles.imageError}>\n                                        {get(form.errors, \"background\")}\n                                    </Typography>\n                                )}\n                            </div>\n                            <div className={styles.fields}>\n                                <TextField name={\"title\"} label={\"Название\"} />\n                                <TextField name={\"text\"} label={\"Текст\"} textarea />\n                            </div>\n                        </Container>\n                        <div className={styles.footer}>\n                            <Container className={styles.footerContent}>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={form.submitForm}\n                                >\n                                    Сохранить\n                                </Button>\n                            </Container>\n                        </div>\n                    </>\n                )}\n            />\n        </>\n    );\n};\n","import React, { useContext, useState } from \"react\";\nimport { IComment } from \"../../entity\";\nimport { Avatar, Button, Card, IconButton, Typography } from \"@material-ui/core\";\nimport { css } from \"emotion\";\nimport { AccountCircle, Delete, Edit } from \"@material-ui/icons\";\nimport { Link } from \"react-router-dom\";\nimport { UserContext } from \"../../app\";\nimport { CustomForm } from \"../custom-form\";\nimport { TextField } from \"../text-field\";\nimport moment from \"moment\";\n\ninterface Props {\n    comment: IComment;\n\n    onEdit?(id: number, data: Partial<IComment>): Promise<void>;\n\n    onDelete?(id: number): Promise<void>;\n}\n\nconst style = {\n    comment: css`\n        padding: 10px;\n    `,\n    content: css`\n        display: grid;\n        grid-template-columns: 40px 1fr;\n        grid-column-gap: 10px;\n    `,\n    link: css`\n        color: #3f51b5;\n        text-decoration: none;\n        :hover {\n            text-decoration: underline;\n        }\n    `,\n    header: css`\n        display: flex;\n        height: 48px;\n    `,\n    icons: css`\n        margin-left: auto;\n        display: grid;\n        grid-template-columns: 48px 48px;\n    `,\n    text: css`\n        margin-top: -25px !important;\n    `,\n};\n\nexport const Comment = (props: Props) => {\n    const { comment, onDelete, onEdit } = props;\n    const userContext = useContext(UserContext);\n    const [edit, setEdit] = useState(false);\n\n    const handleDelete = () => {\n        if (onDelete) {\n            onDelete(comment.id);\n        }\n    };\n\n    const handleEdit = (data: IComment) => {\n        if (onEdit) {\n            onEdit(comment.id, data).then(() => setEdit(false));\n        }\n    };\n\n    return (\n        <Card variant={\"outlined\"} className={style.comment}>\n            <div className={style.content}>\n                {comment?.avatar ? <Avatar src={comment?.avatar} /> : <AccountCircle />}\n                <div>\n                    <div className={style.header}>\n                        <Link to={`/user/${comment.authorId}`} className={style.link}>\n                            {comment.login}\n                        </Link>\n                        {userContext && userContext.user?.id === comment.authorId && (\n                            <div className={style.icons}>\n                                <IconButton onClick={() => setEdit(true)}>\n                                    <Edit />\n                                </IconButton>\n                                <IconButton onClick={handleDelete}>\n                                    <Delete />\n                                </IconButton>\n                            </div>\n                        )}\n                    </div>\n                    {edit ? (\n                        <CustomForm<IComment>\n                            data={comment}\n                            onSubmit={handleEdit}\n                            render={(form) => (\n                                <div>\n                                    <TextField name={\"text\"} textarea />\n                                    <div\n                                        className={css`\n                                            display: flex;\n                                        `}\n                                    >\n                                        <Button onClick={() => setEdit(false)}>Отмена</Button>\n                                        <Button\n                                            onClick={() => {\n                                                if (form.values.text === \"\") {\n                                                    return;\n                                                }\n                                                form.submitForm();\n                                            }}\n                                        >\n                                            Сохранить\n                                        </Button>\n                                    </div>\n                                </div>\n                            )}\n                        />\n                    ) : (\n                        <>\n                            <Typography className={style.text}>{comment.text}</Typography>\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                {moment(comment.createdAt).locale(\"ru\").format(\"MMM Do YY\")}\n                            </Typography>\n                        </>\n                    )}\n                </div>\n            </div>\n        </Card>\n    );\n};\n","import React, { useContext } from \"react\";\nimport { TCreateComment } from \"../../entity\";\nimport { UserContext } from \"../../app\";\nimport { CustomForm } from \"../custom-form\";\nimport { TextField } from \"../text-field\";\nimport { css } from \"emotion\";\nimport {Button, Typography} from \"@material-ui/core\";\n\ninterface Props {\n    postId: number;\n\n    onCreate?(data: TCreateComment): void;\n}\n\nexport const AddComment = (props: Props) => {\n    const { postId, onCreate } = props;\n    const userContext = useContext(UserContext);\n\n    const handleCreateComment = (data: TCreateComment) => {\n        if (onCreate) {\n            onCreate({\n                text: data.text,\n                postId,\n                authorId: userContext.user.id,\n            });\n        }\n    };\n\n    return (\n        <CustomForm<TCreateComment>\n            onSubmit={handleCreateComment}\n            render={(form) => (\n                <div>\n                    <Typography variant={\"h5\"}>Оставить комментарий</Typography>\n                    <TextField name={\"text\"} textarea />\n                    <div\n                        className={css`\n                            display: flex;\n                        `}\n                    >\n                        <Button onClick={() => form.setFieldValue(\"text\", \"\")}>Очистить</Button>\n                        <Button onClick={() => {\n                            if (!form.values.text || form.values.text === \"\") {\n                                return;\n                            }\n                            form.submitForm().then(() => form.setFieldValue(\"text\", \"\"));\n                        }}>Сохранить</Button>\n                    </div>\n                </div>\n            )}\n        />\n    );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { useComment, usePost } from \"../hooks\";\nimport { useParams } from \"react-router\";\nimport { Header } from \"../components/header\";\nimport { css } from \"emotion\";\nimport moment from \"moment\";\nimport { Typography } from \"@material-ui/core\";\nimport { Container } from \"../components/container\";\nimport { Comment } from \"../components/comment\";\nimport { AddComment } from \"../components/add-comment\";\nimport { UserContext } from \"../app\";\n\nconst styles = {\n    header: css`\n        width: 100%;\n        height: 700px;\n        position: relative;\n        z-index: 3;\n        background-repeat: no-repeat !important;\n        background-size: 100% !important;\n        background-position: center !important;\n    `,\n    mask: css`\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.5);\n        top: 0;\n        left: 0;\n        z-index: 4;\n    `,\n    info: css`\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n        z-index: 5;\n    `,\n    date: css`\n        color: #fff;\n        font-size: 20px;\n        font-weight: 700;\n        text-align: center;\n        margin-top: 40px;\n    `,\n    title: css`\n        color: #fff;\n        font-size: 60px;\n        font-weight: 700;\n        text-align: center;\n        margin-top: 150px;\n    `,\n    text: css`\n        margin-bottom: 40px !important;\n    `,\n    comments: css`\n        display: grid;\n        grid-template-columns: 1fr;\n        grid-row-gap: 30px;\n        margin-bottom: 40px !important;\n    `,\n};\n\nexport const Post = () => {\n    const { post, getPost } = usePost();\n    const { id } = useParams();\n    const { comments, deleteComment, createComment, editComment } = useComment(Number(id));\n    const userContext = useContext(UserContext);\n\n    useEffect(() => {\n        getPost(Number(id));\n    }, []);\n\n    return (\n        <>\n            <Header />\n            <div\n                className={styles.header}\n                style={{ background: `url(${post ? post.background : \"\"})` }}\n            >\n                <div className={styles.mask} />\n                <div className={styles.info}>\n                    <div className={styles.date}>\n                        {post && moment(post.createdAt).locale(\"ru\").format(\"MMM Do YY\")}\n                        <div className={styles.title}>{post && post.title}</div>\n                    </div>\n                </div>\n            </div>\n            <Container>\n                <Typography className={styles.text}>{post && post.text}</Typography>\n                <Typography className={styles.text} variant={\"h5\"}>\n                    Комментарии: {comments.length}\n                </Typography>\n                <div className={styles.comments}>\n                    {comments.map((item, index) => (\n                        <Comment\n                            comment={item}\n                            onDelete={deleteComment}\n                            onEdit={editComment}\n                            key={index}\n                        />\n                    ))}\n                </div>\n                {userContext.user && <AddComment postId={Number(id)} onCreate={createComment} />}\n            </Container>\n        </>\n    );\n};\n","import { IComment, TCreateComment } from \"../entity\";\nimport {useCallback, useEffect, useState} from \"react\";\nimport { CommentAPI } from \"../api\";\n\nexport function useComment(\n    postId: number,\n): {\n    comments: IComment[];\n    createComment: (data: TCreateComment) => Promise<void>;\n    editComment: (id: number, data: Partial<IComment>) => Promise<void>;\n    deleteComment: (id: number) => Promise<void>;\n} {\n    const [comments, setComments] = useState<IComment[]>([]);\n\n    const getComments = useCallback(() => {\n        return CommentAPI.getList(postId).then((response) => setComments(response.data));\n    }, []);\n\n    const createComment = useCallback((data: TCreateComment) => {\n        return CommentAPI.createComment(data).then(getComments);\n    }, []);\n\n    const editComment = useCallback((id: number, data: Partial<IComment>) => {\n        return CommentAPI.editComment(id, data).then(getComments);\n    }, []);\n\n    const deleteComment = useCallback((id: number) => {\n        return CommentAPI.deleteComment(id).then(getComments);\n    }, []);\n\n    useEffect(() => {\n        getComments();\n    }, []);\n\n    return { comments, createComment, deleteComment, editComment };\n}\n","import React, { createContext, useEffect, useState } from \"react\";\nimport { IConfig, IUser, IUserContext } from \"../entity\";\nimport { transport } from \"../service\";\nimport {Route, Router, Switch} from \"react-router\";\nimport { AppContext } from \"../context\";\nimport {CreatePost, Main, Post, Profile} from \"../pages\";\nimport { SnackbarProvider } from \"notistack\";\nimport { useAuth } from \"../hooks\";\nimport {PrivateRoute} from \"../components/private-route\";\n\nconst config: IConfig = require(\"../config/config.json\"); // данные находятся в консоли firebase\ntransport.init(config.serverUrl);\nexport const UserContext = createContext<IUserContext | undefined>(undefined);\n\nexport const App = () => {\n    const [user, setUser] = useState<IUser | undefined>(undefined);\n    const [logged, setLogged] = useState(false);\n    const { login } = useAuth();\n\n    useEffect(() => {\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n            transport.setToken(token);\n            login().then((response) => {\n                setUser(response.data);\n                setLogged(true);\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        setLogged(!!user);\n    }, [user]);\n\n    return (\n        <UserContext.Provider value={{ user, setUser }}>\n            <SnackbarProvider>\n                <Router history={AppContext.getHistory()}>\n                    <Switch>\n                        <PrivateRoute auth={logged} exact path={\"/profile\"} render={() => <Profile />} />\n                        <Route path={\"/\"} exact>\n                            <Main />\n                        </Route>\n                        <PrivateRoute auth={logged} path={\"/post/create\"} exact render={() => <CreatePost />} />\n                        <Route path={\"/post/:id\"} exact>\n                            <Post />\n                        </Route>\n                    </Switch>\n                </Router>\n            </SnackbarProvider>\n        </UserContext.Provider>\n    );\n};\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { JssProvider } from \"./components\";\n\nReactDOM.render(\n    <JssProvider>\n        <App />\n    </JssProvider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}