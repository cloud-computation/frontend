{"version":3,"sources":["components/avatar/user.svg","service/Transport.ts","context/AppContext.ts","api/auth.ts","api/user.ts","hooks/useAuth.ts","hooks/useCustomSnackbar.ts","utils/error.ts","utils/file.ts","components/custom-form/CustomForm.tsx","components/private-route/PrivateRoute.tsx","components/text-field/TextField.tsx","components/jss-provider/JssProvider.tsx","components/popup/Popup.tsx","components/menu/Menu.tsx","components/confirm-popup/ConfirmPopup.tsx","components/avatar/Avatar.tsx","components/upload-avatar/UploadAvatar.tsx","hooks/useFile.ts","pages/SignIn.tsx","pages/SignUp.tsx","pages/ForgotPassword.tsx","components/container/Container.tsx","widgets/auth-popup/AuthPopup.tsx","components/header/Header.tsx","pages/Main.tsx","pages/Profile.tsx","hooks/useUser.ts","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","transport","headers","token","instance","serverUrl","this","axios","create","baseURL","url","params","get","config","response","data","post","put","delete","localStorage","setItem","formData","FormData","mapValues","value","key","isString","File","append","JSON","stringify","history","createBrowserHistory","AppContext","signUp","signIn","forgotPassword","login","getUser","editUser","user","uploadAvatar","formatToFormData","deleteAvatar","useAuth","useCallback","AuthAPI","useCustomSnackbar","enqueueSnackbar","useSnackbar","showErrorSnackbar","message","variant","showSuccessSnackbar","showDefaultSnackbar","showWarningSnackbar","showInfoSnackbar","getServerError","error","dataURLtoFile","dataurl","filename","type","head","split","src","last","mime","match","byteString","atob","n","length","u8arr","Uint8Array","charCodeAt","blob","Blob","getExtension","resolve","file","reader","FileReader","readAsArrayBuffer","onloadend","result","ext","fileType","getUnsafeExtension","name","toLowerCase","CustomForm","props","onSubmit","validationSchema","render","validate","validateOnBlur","validateOnChange","handleSubmit","initialValues","stubObject","enableReinitialize","PrivateRoute","auth","rest","routeProps","exact","to","styles","errorMessage","emotion","errorText","TextField","label","classes","size","InputLabelProps","textarea","disable","field","meta","fullWidth","multiline","disabled","helperText","className","FormHelperTextProps","root","margin","insertionPoint","document","getElementById","jss","jssPreset","JssProvider","children","StylesProvider","displayName","popup","css","header","title","close","Popup","open","onClose","Dialog","paper","DialogTitle","disableTypography","Typography","IconButton","onClick","Close","Menu","anchor","options","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","map","item","index","MenuItem","handler","button","actions","ConfirmPopup","cancelTitle","submitTitle","DialogActions","Button","color","DEFAULT","require","wrapper","image","Avatar","cn","alt","icons","icon","avatar","input","progress","UploadAvatar","onDeleteAvatar","loading","useState","modalOpen","setModalOpen","inputRef","useRef","undefined","setFile","setSrc","setError","loadFile","f","a","getError","readAsDataURL","fromEvent","subscribe","maxFileSize","Promise","whiteList","indexOf","join","deleteFile","useFile","onModalClose","useEffect","current","click","Edit","startIcon","CloudUpload","align","ref","onChange","event","target","files","LinearProgress","Yup","shape","email","required","password","min","inner","Container","cx","signInValidationSchema","signUpValidationSchema","forgotPasswordValidationSchema","card","footer","link","AuthPopup","setUser","mode","setMode","popupTitle","Map","then","setToken","catch","err","form","submitForm","isValid","content","profile","Header","setAnchorEl","isMenuOpen","Boolean","userContext","useContext","UserContext","logoutPopupVisible","setLogoutPopupVisible","authPopup","setAuthPopup","onCloseLogoutPopup","handleMenuClose","Tooltip","currentTarget","AccountCircle","path","push","removeItem","Main","Profile","UserAPI","updateUser","useUser","omit","shrink","values","isEqual","init","createContext","App","logged","setLogged","window","onbeforeunload","location","pathname","getItem","redirectPath","Provider","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.fb7128a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.7a21cbe9.svg\";","import axios, { AxiosInstance } from \"axios\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport { mapValues, isString } from \"lodash\";\r\nimport {TResponse} from \"../entity\";\r\n\r\nexport type TransportConfig = Pick<AxiosRequestConfig, \"headers\" | \"baseURL\" | \"params\">;\r\n\r\nexport class Transport {\r\n    private headers = {};\r\n    private token?: string;\r\n    private instance: AxiosInstance = null;\r\n\r\n    init(serverUrl: string): void {\r\n        this.instance = axios.create({\r\n            baseURL: serverUrl,\r\n        });\r\n    }\r\n\r\n    async get<Response>(url: string, params?: object): Promise<TResponse<Response>> {\r\n        const response = await this.instance.get(url, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    async post<Request, Response>(\r\n        url: string,\r\n        data?: Request,\r\n        params?: object,\r\n    ): Promise<TResponse<Response>> {\r\n        const response = await this.instance.post(url, data, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    async put<Request, Response>(\r\n        url: string,\r\n        data: Request,\r\n        params?: object,\r\n    ): Promise<TResponse<Response>> {\r\n        const response = await this.instance.put(url, data, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    async delete<Response = void>(url: string, params?: object): Promise<TResponse<Response>> {\r\n        const response = await this.instance.delete(url, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    setToken(token: string): void {\r\n        this.token = token;\r\n        localStorage.setItem(\"token\", token);\r\n    }\r\n\r\n    formatToFormData(params: {}): FormData {\r\n        const formData = new FormData();\r\n        mapValues(params, (value: string | File, key) => {\r\n            const isFile = !isString(value) && (value as {}) instanceof File;\r\n            if (!isFile && !isString(value)) {\r\n                return formData.append(key, JSON.stringify(value));\r\n            }\r\n            formData.append(key, value);\r\n        });\r\n        return formData;\r\n    }\r\n\r\n    private config(params?: object): TransportConfig {\r\n        return {\r\n            headers: {\r\n                ...this.headers,\r\n                \"Content-Type\": \"application/json\",\r\n                token: this.token\r\n            },\r\n            params,\r\n        };\r\n    }\r\n}\r\n\r\nexport const transport = new Transport();\r\n","import { createBrowserHistory, History } from \"history\";\n\nconst history = createBrowserHistory();\n\nexport const AppContext = {\n    getHistory(): History {\n        return history;\n    },\n};\n","import { IResponseMessage, ISignInData, ISignUpData, IUser, TResponse } from \"../entity\";\nimport { transport } from \"../service\";\n\nexport function signUp(data: ISignUpData) {\n    return transport.post<ISignUpData, IResponseMessage>(`/auth/signUp`, data);\n}\n\nexport function signIn(data: ISignInData) {\n    return transport.post<ISignInData, { token: string }>(\"/auth/signIn\", data);\n}\n\nexport function forgotPassword(data: { email: string }) {\n    return transport.post<{ email: string }, IResponseMessage>(\"/auth/forgotPassword\", data);\n}\n\nexport function login() {\n    return transport.post<{ token: string }, IUser>(\"/auth/login\");\n}\n","import {IUpdateAvatar, IUser} from \"../entity\";\r\nimport {transport} from \"../service\";\r\n\r\nexport function getUser() {\r\n    return transport.get<IUser>(\"/user\");\r\n}\r\n\r\nexport function editUser(user: Partial<IUser>) {\r\n    return transport.put<Partial<IUser>, IUser>(\"/user\", user);\r\n}\r\n\r\nexport function uploadAvatar(data: IUpdateAvatar) {\r\n    return transport.put<FormData, IUser>(\"/user/avatar\", transport.formatToFormData(data));\r\n}\r\n\r\nexport function deleteAvatar() {\r\n    return transport.delete<IUser>(\"/user/avatar\")\r\n}\r\n","import {IResponseMessage, ISignInData, ISignUpData, IUser, TResponse} from \"../entity\";\nimport { useCallback } from \"react\";\nimport { AuthAPI } from \"../api\";\n\nexport function useAuth(): {\n    signIn: (data: ISignInData) => Promise<TResponse<{token: string}>>;\n    signUp: (data: ISignInData) => Promise<TResponse<IResponseMessage>>;\n    forgotPassword: (data: { email: string }) => Promise<TResponse<IResponseMessage>>;\n    login: () => Promise<TResponse<IUser>>;\n} {\n    const signIn = useCallback((data: ISignInData) => {\n        return AuthAPI.signIn(data);\n    }, []);\n\n    const signUp = useCallback((data: ISignUpData) => {\n        return AuthAPI.signUp(data);\n    }, []);\n\n    const forgotPassword = useCallback((data: { email: string }) => {\n        return AuthAPI.forgotPassword(data);\n    }, []);\n\n    const login = useCallback(() => {\n        return AuthAPI.login();\n    }, []);\n\n    return { signIn, forgotPassword, signUp, login };\n}\n","import { useSnackbar } from \"notistack\";\r\n\r\nexport function useCustomSnackbar(): {\r\n    showSuccessSnackbar: (message: string) => void;\r\n    showErrorSnackbar: (message: string) => void;\r\n    showDefaultSnackbar: (message: string) => void;\r\n    showWarningSnackbar: (message: string) => void;\r\n    showInfoSnackbar: (message: string) => void;\r\n} {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    return {\r\n        showErrorSnackbar: (message) => enqueueSnackbar(message, { variant: \"error\" }),\r\n        showSuccessSnackbar: (message) => enqueueSnackbar(message, { variant: \"success\" }),\r\n        showDefaultSnackbar: (message) => enqueueSnackbar(message, { variant: \"default\" }),\r\n        showWarningSnackbar: (message) => enqueueSnackbar(message, { variant: \"warning\" }),\r\n        showInfoSnackbar: (message) => enqueueSnackbar(message, { variant: \"info\" }),\r\n    }\r\n}\r\n","import { AxiosError, AxiosResponse } from \"axios\";\r\nimport {IServerError, TServerError} from \"../entity\";\r\n\r\nexport function getServerError(error: AxiosError): IServerError | undefined {\r\n    const response = error.response as AxiosResponse<TServerError>;\r\n    if (!response) {\r\n        return undefined;\r\n    }\r\n    return response.data.error;\r\n}\r\n","import { head, last, get } from \"lodash\";\r\nimport fileType from \"file-type\";\r\n\r\nexport function dataURLtoFile(dataurl: string, filename: string): File {\r\n    const type = head(dataurl.split(\",\"));\r\n    const src = last(dataurl.split(\",\"));\r\n\r\n    const mime = last(type!.match(/:(.*?);/));\r\n    const byteString = atob(src!);\r\n    let n = byteString.length;\r\n    const u8arr = new Uint8Array(n);\r\n    while (n) {\r\n        u8arr[n - 1] = byteString.charCodeAt(n - 1);\r\n        n -= 1; // to make eslint happy\r\n    }\r\n    const blob = new Blob([u8arr], { type: mime });\r\n    const file = new File([blob], filename, { type: mime });\r\n    return file;\r\n}\r\n\r\nexport function getExtension(resolve: (ext: string) => void, file: File): void {\r\n    const reader = new FileReader();\r\n    if (!file) {\r\n        return;\r\n    }\r\n    reader.readAsArrayBuffer(file);\r\n    (reader.onloadend = () => {\r\n        const result = reader.result as ArrayBuffer;\r\n        const ext = get(fileType(result), \"ext\", \"\");\r\n        resolve(ext);\r\n    });\r\n}\r\n\r\nexport function getUnsafeExtension(file: File): string {\r\n    return (last(file.name.split(\".\")) || \"\").toLowerCase();\r\n}\r\n","import React, { useCallback } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { FormikErrors, FormikProps } from \"formik/dist/types\";\r\nimport { stubObject } from \"lodash\";\r\n\r\ninterface ICustomFormProps<T> {\r\n    data?: T;\r\n    validationSchema?: any | (() => any);\r\n    validateOnChange?: boolean;\r\n    validateOnBlur?: boolean;\r\n\r\n    render(props?: FormikProps<T>): void;\r\n\r\n    onSubmit?(data: T): void;\r\n\r\n    validate?(data: T): void | object | Promise<FormikErrors<T>>;\r\n}\r\n\r\nexport const CustomForm = <T extends object>(props: ICustomFormProps<T>) => {\r\n    const {\r\n        data = {},\r\n        onSubmit,\r\n        validationSchema,\r\n        render,\r\n        validate,\r\n        validateOnBlur = true,\r\n        validateOnChange = true,\r\n    } = props;\r\n\r\n    const handleSubmit = useCallback(\r\n        (data: T) => {\r\n            if (!onSubmit) {\r\n                return;\r\n            }\r\n            onSubmit(data);\r\n        },\r\n        [onSubmit],\r\n    );\r\n\r\n    return (\r\n        <Formik<T>\r\n            initialValues={data || stubObject()}\r\n            onSubmit={handleSubmit}\r\n            validate={validate}\r\n            validationSchema={validationSchema}\r\n            validateOnChange={validateOnChange}\r\n            validateOnBlur={validateOnBlur}\r\n            enableReinitialize\r\n        >\r\n            {(props) => render(props)}\r\n        </Formik>\r\n    );\r\n};\r\n","import * as React from \"react\";\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\n\ninterface IPrivateRouteProps extends RouteProps {\n    auth: boolean;\n    render: (props: RouteComponentProps) => React.ReactNode;\n}\n\nexport const PrivateRoute = (props: IPrivateRouteProps) => {\n    const { render, auth, ...rest } = props;\n    return (\n        <Route\n            {...rest}\n            render={(routeProps: RouteComponentProps) =>\n                auth ? render(routeProps) : <Redirect exact to={\"/\"} />\n            }\n        />\n    );\n};\n","import * as emotion from \"emotion\";\r\nimport React from \"react\";\r\nimport { Field, FieldProps, FieldValidator } from \"formik\";\r\nimport { TextField as MaterialTextField, InputLabelProps } from \"@material-ui/core\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\n\r\ninterface ITextFieldProps {\r\n    name: string;\r\n    InputLabelProps?: InputLabelProps;\r\n    label?: string;\r\n    error?: boolean;\r\n    classes?: object;\r\n    type?: string;\r\n    size?: \"small\" | \"medium\";\r\n    textarea?: boolean;\r\n    validate?: FieldValidator;\r\n    disable?: boolean;\r\n}\r\n\r\nconst styles = {\r\n    errorMessage: emotion.css`\r\n        margin: 10px 0 0 0 !important;\r\n        display: flex;\r\n        align-items: center;\r\n    `,\r\n    errorText: emotion.css`\r\n        padding-left: 10px;\r\n    `,\r\n};\r\n\r\nexport const TextField = (props: ITextFieldProps) => {\r\n    const {\r\n        name,\r\n        label,\r\n        error,\r\n        classes,\r\n        type = \"text\",\r\n        size,\r\n        InputLabelProps,\r\n        textarea = false,\r\n        validate,\r\n        disable\r\n    } = props;\r\n\r\n    return (\r\n        <Field name={name} validate={validate}>\r\n            {({ field, meta }: FieldProps) => (\r\n                <MaterialTextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    label={label}\r\n                    type={type}\r\n                    error={!!meta.error || error}\r\n                    size={size}\r\n                    InputLabelProps={InputLabelProps}\r\n                    multiline={textarea}\r\n                    disabled={disable}\r\n                    helperText={\r\n                        meta.error && (\r\n                            <>\r\n                                <ErrorIcon />\r\n                                <span className={styles.errorText}>{meta.error}</span>\r\n                            </>\r\n                        )\r\n                    }\r\n                    FormHelperTextProps={{\r\n                        classes: { root: styles.errorMessage },\r\n                    }}\r\n                    classes={classes}\r\n                    margin=\"normal\"\r\n                    {...field}\r\n                />\r\n            )}\r\n        </Field>\r\n    );\r\n};\r\n","import { jssPreset, StylesProvider } from \"@material-ui/styles\";\r\nimport { create } from \"jss\";\r\nimport * as React from \"react\";\r\n\r\nconst insertionPoint = document.getElementById(\"jss-insertion-point\");\r\n\r\nconst jss = create({\r\n    ...jssPreset(),\r\n    insertionPoint: insertionPoint!,\r\n});\r\n\r\nexport const JssProvider: React.FC = ({ children }) => {\r\n    return <StylesProvider jss={jss}>{children}</StylesProvider>;\r\n};\r\n\r\nJssProvider.displayName = \"JssProvider\";\r\n","import React, { FC } from \"react\";\r\nimport { Dialog, DialogTitle, IconButton, Typography } from \"@material-ui/core\";\r\nimport { css } from \"emotion\";\r\nimport { Close } from \"@material-ui/icons\";\r\n\r\nexport interface IPopupProps {\r\n    title: string;\r\n    open: boolean;\r\n\r\n    onClose?(): void;\r\n}\r\n\r\nconst styles = {\r\n    popup: css`\r\n        min-width: 600px;\r\n    `,\r\n    header: css`\r\n        display: flex;\r\n        width: 100%;\r\n        align-items: center;\r\n        box-sizing: border-box;\r\n        width: 100%;\r\n        padding: 16px 10px 16px 24px !important;\r\n    `,\r\n    title: css`\r\n        width: 400px;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    `,\r\n    close: css`\r\n        margin-left: auto !important;\r\n    `\r\n};\r\n\r\nexport const Popup: FC<IPopupProps> = (props) => {\r\n    const { open, title, onClose, children } = props;\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} classes={{paper: styles.popup}}>\r\n            <DialogTitle className={styles.header} disableTypography>\r\n                <Typography variant={\"h6\"} className={styles.title}>{title}</Typography>\r\n                <IconButton onClick={onClose} className={styles.close}>\r\n                    <Close />\r\n                </IconButton>\r\n            </DialogTitle>\r\n            {children}\r\n        </Dialog>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Menu as MaterialMenu, MenuItem } from \"@material-ui/core\";\r\nimport {IOption} from \"../../entity\";\r\n\r\ninterface IMenuProps {\r\n    anchor: HTMLElement | null;\r\n    open: boolean;\r\n    options: IOption[];\r\n\r\n    onClose?(): void;\r\n}\r\n\r\nexport const Menu = (props: IMenuProps) => {\r\n    const { anchor, onClose, open, options = [] } = props;\r\n\r\n    return (\r\n        <MaterialMenu\r\n            open={open}\r\n            anchorEl={anchor}\r\n            onClose={onClose}\r\n            anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n            }}\r\n            keepMounted\r\n            transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"right\",\r\n            }}\r\n        >\r\n            {options.map((item, index) => (\r\n                <MenuItem onClick={item.handler} key={index}>\r\n                    {item.value}\r\n                </MenuItem>\r\n            ))}\r\n        </MaterialMenu>\r\n    );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { IPopupProps, Popup } from \"../popup\";\r\nimport { Button, DialogActions } from \"@material-ui/core\";\r\nimport { css } from \"emotion\";\r\n\r\ninterface IConfirmPopupProps extends IPopupProps {\r\n    submitTitle?: string;\r\n    cancelTitle?: string;\r\n\r\n    onSubmit?(): void;\r\n}\r\n\r\nconst styles = {\r\n    button: css`\r\n        margin-right: 20px;\r\n    `,\r\n    actions: css`\r\n        padding: 16px 24px !important;\r\n    `\r\n};\r\n\r\nexport const ConfirmPopup: FC<IConfirmPopupProps> = (props) => {\r\n    const {\r\n        onClose,\r\n        open,\r\n        title,\r\n        onSubmit,\r\n        cancelTitle = \"Отмена\",\r\n        submitTitle = \"Ок\",\r\n    } = props;\r\n    return (\r\n        <Popup open={open} title={title} onClose={onClose}>\r\n            <DialogActions className={styles.actions}>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    onClick={onClose}\r\n                    className={styles.button}\r\n                >\r\n                    {cancelTitle}\r\n                </Button>\r\n                <Button variant=\"outlined\" color={\"primary\"} onClick={onSubmit}>\r\n                    {submitTitle}\r\n                </Button>\r\n            </DialogActions>\r\n        </Popup>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { css } from \"emotion\";\r\nimport cn from \"classnames\";\r\n\r\nconst DEFAULT = require(\"./user.svg\");\r\n\r\ninterface IAvatarProps {\r\n    url?: string;\r\n    name?: string\r\n    className?: string;\r\n}\r\n\r\nconst styles = {\r\n    wrapper: css`\r\n        width: 200px;\r\n        height: 200px;\r\n        overflow: hidden;\r\n        border-radius: 50%;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n    `,\r\n    image: css`\r\n        width: 100%;\r\n        height: 100%;\r\n    `\r\n};\r\n\r\nexport const Avatar = (props: IAvatarProps) => {\r\n    const { url, name, className } = props;\r\n    return (\r\n        <div className={cn(styles.wrapper, className)}>\r\n            <img src={url || DEFAULT} alt={name} className={styles.image}/>\r\n        </div>\r\n    );\r\n};\r\n","import React, { ChangeEvent, useEffect, useRef, useState } from \"react\";\r\nimport { css } from \"emotion\";\r\nimport { Button, IconButton, LinearProgress, Typography } from \"@material-ui/core\";\r\nimport { Close, CloudUpload, Edit } from \"@material-ui/icons\";\r\nimport { Avatar, ConfirmPopup } from \"../../components\";\r\nimport { useFile } from \"../../hooks\";\r\n\r\ninterface IUploadAvatarProps {\r\n    src?: string;\r\n    loading?: boolean;\r\n\r\n    onDeleteAvatar?(): void;\r\n\r\n    uploadAvatar?(file: File): void;\r\n}\r\n\r\nconst styles = {\r\n    wrapper: css`\r\n        position: relative;\r\n        padding-top: 40px;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n    `,\r\n    icons: css`\r\n        position: absolute !important;\r\n        right: 0;\r\n        top: 0;\r\n    `,\r\n    icon: css`\r\n        margin-right: 10px;\r\n        :last-child {\r\n            margin-right: 0;\r\n        }\r\n    `,\r\n    avatar: css`\r\n        margin-bottom: 20px;\r\n    `,\r\n    button: css`\r\n        width: 100%;\r\n    `,\r\n    input: css`\r\n        display: none;\r\n    `,\r\n    progress: css`\r\n        width: 100%;\r\n        margin-top: 20px;\r\n    `,\r\n    error: css`\r\n        margin-top: 20px !important;\r\n    `\r\n};\r\n\r\nexport const UploadAvatar = (props: IUploadAvatarProps) => {\r\n    const { onDeleteAvatar, uploadAvatar, loading } = props;\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const { src, file, error, setSrc, deleteFile, loadFile } = useFile({\r\n        whiteList: [\"png\", \"jpg\", \"pdf\", \"gif\", \"jpeg\"],\r\n        maxFileSize: 1048576,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setSrc(props.src);\r\n        setSrc(props.src);\r\n    }, [props.src, setSrc]);\r\n\r\n    function onModalOpen(): void {\r\n        setModalOpen(true);\r\n    }\r\n\r\n    function onModalClose(): void {\r\n        setModalOpen(false);\r\n    }\r\n\r\n    const onChoseFile = () => {\r\n        if (!inputRef.current) {\r\n            return;\r\n        }\r\n        inputRef.current.click();\r\n    };\r\n\r\n    const onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const file = event.target.files?.item(0);\r\n        if (!file) {\r\n            return;\r\n        }\r\n        loadFile(file);\r\n    };\r\n\r\n    const deleteAvatar = () => {\r\n        deleteFile();\r\n        onModalClose();\r\n        if (onDeleteAvatar) {\r\n            onDeleteAvatar();\r\n        }\r\n    };\r\n\r\n    const onUploadAvatar = () => {\r\n        if (!uploadAvatar || !file) {\r\n            return;\r\n        }\r\n        uploadAvatar(file);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.wrapper}>\r\n                <div className={styles.icons}>\r\n                    <IconButton className={styles.icon} onClick={onChoseFile}>\r\n                        <Edit />\r\n                    </IconButton>\r\n                    {src && (\r\n                        <IconButton className={styles.icon} onClick={onModalOpen}>\r\n                            <Close />\r\n                        </IconButton>\r\n                    )}\r\n                </div>\r\n                <Avatar url={src} className={styles.avatar} />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    startIcon={<CloudUpload />}\r\n                    className={styles.button}\r\n                    onClick={onUploadAvatar}\r\n                    disabled={loading}\r\n                >\r\n                    Загрузить\r\n                </Button>\r\n                {error && (\r\n                    <Typography color={\"error\"} align={\"center\"} className={styles.error}>\r\n                        {error}\r\n                    </Typography>\r\n                )}\r\n                <input type=\"file\" className={styles.input} ref={inputRef} onChange={onChange} />\r\n            </div>\r\n            {loading && <LinearProgress className={styles.progress} />}\r\n            <ConfirmPopup\r\n                title={\"Вы действительно хотите удалить аватар?\"}\r\n                submitTitle={\"Удалить\"}\r\n                open={modalOpen}\r\n                onClose={onModalClose}\r\n                onSubmit={deleteAvatar}\r\n            />\r\n        </>\r\n    );\r\n};\r\n","import { Dispatch, SetStateAction, useState } from \"react\";\r\nimport { fromEvent } from \"rxjs/internal/observable/fromEvent\";\r\nimport { dataURLtoFile, getExtension, getUnsafeExtension } from \"../utils\";\r\n\r\nexport interface IFileServiceParams {\r\n    maxFileSize: number;\r\n    whiteList: string[];\r\n}\r\n\r\nexport function useFile(\r\n    params: IFileServiceParams,\r\n): {\r\n    file?: File;\r\n    src?: string;\r\n    setSrc: Dispatch<SetStateAction<string | undefined>>\r\n    error?: string;\r\n    setError: Dispatch<SetStateAction<string | undefined>>\r\n    loadFile: (file: File) => Promise<void>;\r\n    deleteFile: () => void;\r\n} {\r\n    const [file, setFile] = useState<File | undefined>(undefined);\r\n    const [src, setSrc] = useState<string | undefined>(undefined);\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n\r\n    const loadFile = async (f: File) => {\r\n        if (!!(await getError(f))) {\r\n            setError(await getError(f));\r\n            return;\r\n        }\r\n        setError(undefined);\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(f);\r\n        fromEvent(reader, \"loadend\").subscribe(async () => {\r\n            try {\r\n                setSrc(reader.result as string);\r\n                setFile(dataURLtoFile(reader.result as string, f.name));\r\n            } catch (error) {\r\n                // Nothing here\r\n            }\r\n        });\r\n    };\r\n\r\n    const getError = async (file: File): Promise<string | undefined> => {\r\n        if (file.size > params.maxFileSize) {\r\n            return `Размер файла не должен превышать ${params.maxFileSize / (1024 * 1024)}МБ !`;\r\n        }\r\n        const ext = await new Promise((resolve: (ext: string) => void) =>\r\n            getExtension(resolve, file),\r\n        );\r\n        if (params.whiteList.indexOf(ext) < 0) {\r\n            return `Файл этого типа не может быть загружен. Разрешенные расширения: ${params.whiteList.join(\", \")}`;\r\n        }\r\n        if (getUnsafeExtension(file) !== ext) {\r\n            return \"Тип файла не соответствует его расширению. Пожалуйста, повторите попытку.\";\r\n        }\r\n        return undefined;\r\n    };\r\n\r\n    const deleteFile = () => {\r\n        setSrc(undefined);\r\n        setFile(undefined);\r\n        setError(undefined);\r\n    };\r\n\r\n    return { file, src, error, loadFile, deleteFile, setSrc, setError };\r\n}\r\n","import React from \"react\";\nimport { css, cx } from \"emotion\";\nimport {useAuth, useCustomSnackbar} from \"../hooks\";\nimport { ISignInData } from \"../entity\";\nimport { Button, Card, Typography } from \"@material-ui/core\";\nimport { TextField, CustomForm } from \"../components\";\nimport { AppContext } from \"../context\";\nimport * as Yup from \"yup\";\nimport { Link } from \"react-router-dom\";\nimport {getServerError} from \"../utils\";\n\ninterface Props {\n    setLogged(value: boolean): void;\n}\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Некорректный e-mail\").required(\"Обязательно для заполнения\"),\n    password: Yup.string()\n        .required(\"Обязательно для заполнения\")\n        .min(6, \"Пароль должен быть не меньше 6 символов\"),\n});\n\nconst styles = {\n    wrapper: css`\n        width: 100vw;\n        height: 100vh;\n        position: fixed;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background: #f5f5f5;\n    `,\n    card: css`\n        padding: 20px;\n        display: grid;\n        grid-template-columns: 1fr;\n        grid-row-gap: 20px;\n        width: 500px;\n    `,\n    footer: css`\n        display: flex;\n    `,\n    link: css`\n        text-decoration: none;\n        color: #3f51b5;\n    `,\n};\n\nexport const SignIn = (props: Props) => {\n    const { setLogged } = props;\n    const { signIn } = useAuth();\n    const { showErrorSnackbar } = useCustomSnackbar();\n\n    const handleSignIn = (data: ISignInData) => {\n        signIn(data)\n            .then(() => {\n                setLogged(true);\n                AppContext.getHistory().push(\"/\");\n            })\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    return (\n        <CustomForm<ISignInData>\n            onSubmit={handleSignIn}\n            validationSchema={validationSchema}\n            render={(form) => (\n                <div className={styles.wrapper}>\n                    <Card className={styles.card}>\n                        <Typography variant={\"h4\"} align={\"center\"}>\n                            Войти\n                        </Typography>\n                        <TextField name={\"email\"} label={\"Email\"} />\n                        <TextField name={\"password\"} label={\"Пароль\"} type={\"password\"} />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={form?.submitForm}\n                            disabled={!form.isValid}\n                        >\n                            Войти\n                        </Button>\n                        <div className={styles.footer}>\n                            <Link to={\"/sign-up\"} className={styles.link}>\n                                Регистрация\n                            </Link>\n                            <Link\n                                to={\"/forgot-password\"}\n                                className={cx(\n                                    styles.link,\n                                    css`\n                                        margin-left: auto;\n                                    `,\n                                )}\n                            >\n                                Не могу вспомнить пароль\n                            </Link>\n                        </div>\n                    </Card>\n                </div>\n            )}\n        />\n    );\n};\n","import React from \"react\";\nimport { css } from \"emotion\";\nimport { ISignUpData } from \"../entity\";\nimport { Button, Card, Typography } from \"@material-ui/core\";\nimport { TextField, CustomForm } from \"../components\";\nimport * as Yup from \"yup\";\nimport { Link } from \"react-router-dom\";\nimport { useAuth, useCustomSnackbar } from \"../hooks\";\nimport { getServerError } from \"../utils\";\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Некорректный e-mail\").required(\"Обязательно для заполнения\"),\n    login: Yup.string()\n        .required(\"Обязательно для заполнения\")\n        .min(4, \"Пароль должен быть не меньше 4 символов\"),\n    password: Yup.string()\n        .required(\"Обязательно для заполнения\")\n        .length(6, \"Пароль должен быть не меньше 6 символов\"),\n});\n\nconst styles = {\n    wrapper: css`\n        width: 100vw;\n        height: 100vh;\n        position: fixed;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background: #f5f5f5;\n    `,\n    card: css`\n        padding: 20px;\n        display: grid;\n        grid-template-columns: 1fr;\n        grid-row-gap: 20px;\n        width: 500px;\n    `,\n    footer: css`\n        display: flex;\n    `,\n    link: css`\n        text-decoration: none;\n        color: #3f51b5;\n    `,\n};\n\nexport const SignUp = () => {\n    const { signUp } = useAuth();\n    const { showErrorSnackbar, showSuccessSnackbar } = useCustomSnackbar();\n\n    const onSubmit = (data: ISignUpData) => {\n        signUp(data)\n            .then(() => showSuccessSnackbar(\"Вы успешно зарегистрированы!\"))\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    return (\n        <CustomForm<ISignUpData>\n            onSubmit={onSubmit}\n            validationSchema={validationSchema}\n            render={(form) => (\n                <div className={styles.wrapper}>\n                    <Card className={styles.card}>\n                        <Typography variant={\"h4\"} align={\"center\"}>\n                            Регистрация\n                        </Typography>\n                        <TextField name={\"login\"} label={\"Логин\"} />\n                        <TextField name={\"email\"} label={\"Email\"} />\n                        <TextField name={\"password\"} label={\"Пароль\"} type={\"password\"} />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={form?.submitForm}\n                            disabled={!form.isValid}\n                        >\n                            Регистрация\n                        </Button>\n                        <div className={styles.footer}>\n                            <Link to={\"/sign-in\"} className={styles.link}>\n                                Войти\n                            </Link>\n                        </div>\n                    </Card>\n                </div>\n            )}\n        />\n    );\n};\n","import React from \"react\";\nimport { css, cx } from \"emotion\";\nimport { Button, Card, Typography } from \"@material-ui/core\";\nimport { TextField, CustomForm } from \"../components\";\nimport * as Yup from \"yup\";\nimport { Link } from \"react-router-dom\";\nimport { useAuth, useCustomSnackbar } from \"../hooks\";\nimport { getServerError } from \"../utils\";\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Некорректный e-mail\").required(\"Обязательно для заполнения\"),\n});\n\nconst styles = {\n    wrapper: css`\n        width: 100vw;\n        height: 100vh;\n        position: fixed;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background: #f5f5f5;\n    `,\n    card: css`\n        padding: 20px;\n        display: grid;\n        grid-template-columns: 1fr;\n        grid-row-gap: 20px;\n        width: 500px;\n    `,\n    footer: css`\n        display: flex;\n    `,\n    link: css`\n        text-decoration: none;\n        color: #3f51b5;\n    `,\n};\n\nexport const ForgotPassword = () => {\n    const { forgotPassword } = useAuth();\n    const { showErrorSnackbar, showSuccessSnackbar } = useCustomSnackbar();\n\n    const onSubmit = (data: { email: string }) => {\n        forgotPassword(data)\n            .then(() => {\n                showSuccessSnackbar(\"Пароль успешно отправлен\");\n            })\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    return (\n        <CustomForm<{ email: string }>\n            onSubmit={onSubmit}\n            validationSchema={validationSchema}\n            render={(form) => (\n                <div className={styles.wrapper}>\n                    <Card className={styles.card}>\n                        <Typography variant={\"h4\"} align={\"center\"}>\n                            Восстановление пароля\n                        </Typography>\n                        <Typography variant={\"h6\"} align={\"center\"}>\n                            На введенный е-mail мы отправим новый пароль\n                        </Typography>\n                        <TextField name={\"email\"} label={\"Email\"} />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={form?.submitForm}\n                            disabled={!form.isValid}\n                        >\n                            Отправить\n                        </Button>\n                        <div className={styles.footer}>\n                            <Link to={\"/sign-up\"} className={styles.link}>\n                                Регистрация\n                            </Link>\n                            <Link\n                                to={\"/sign-in\"}\n                                className={cx(\n                                    styles.link,\n                                    css`\n                                        margin-left: auto;\n                                    `,\n                                )}\n                            >\n                                Войти\n                            </Link>\n                        </div>\n                    </Card>\n                </div>\n            )}\n        />\n    );\n};\n","import React, { FC } from \"react\";\nimport { css, cx } from \"emotion\";\n\ninterface Props {\n    className?: string;\n}\n\nconst styles = {\n    inner: css`\n        width: 1200px;\n        margin: 0 auto;\n    `,\n};\n\nexport const Container: FC<Props> = (props) => {\n    return <div className={cx(styles.inner, props.className)}>{props.children}</div>;\n};\n","import React, { useState } from \"react\";\nimport { Popup } from \"../../components/popup\";\nimport { ISignInData, ISignUpData, IUser } from \"../../entity\";\nimport { Button, Card, Typography } from \"@material-ui/core\";\nimport { TextField } from \"../../components/text-field\";\nimport { css, cx } from \"emotion\";\nimport { CustomForm } from \"../../components/custom-form\";\nimport * as Yup from \"yup\";\nimport { useAuth, useCustomSnackbar } from \"../../hooks\";\nimport { getServerError } from \"../../utils\";\nimport { transport } from \"../../service\";\n\ninterface Props {\n    open: boolean;\n\n    onClose?(): void;\n\n    setUser(user: IUser): void;\n}\n\nconst signInValidationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Некорректный e-mail\").required(\"Обязательно для заполнения\"),\n    password: Yup.string()\n        .required(\"Обязательно для заполнения\")\n        .min(6, \"Пароль должен быть не меньше 6 символов\"),\n});\n\nconst signUpValidationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Некорректный e-mail\").required(\"Обязательно для заполнения\"),\n    login: Yup.string()\n        .required(\"Обязательно для заполнения\")\n        .min(4, \"Пароль должен быть не меньше 4 символов\"),\n    password: Yup.string()\n        .required(\"Обязательно для заполнения\")\n        .length(6, \"Пароль должен быть не меньше 6 символов\"),\n});\n\nconst forgotPasswordValidationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Некорректный e-mail\").required(\"Обязательно для заполнения\"),\n});\n\nconst styles = {\n    card: css`\n        padding: 20px;\n        display: grid;\n        grid-template-columns: 1fr;\n        grid-row-gap: 20px;\n    `,\n    footer: css`\n        display: flex;\n    `,\n    link: css`\n        text-decoration: none;\n        color: #3f51b5;\n        cursor: pointer;\n        :hover {\n            text-decoration: underline;\n        }\n    `,\n};\n\nexport const AuthPopup = (props: Props) => {\n    const { open, onClose, setUser } = props;\n    const [mode, setMode] = useState<\"signIn\" | \"signUp\" | \"forgotPassword\">(\"signIn\");\n    const popupTitle = new Map([\n        [\"signIn\", \"Войти\"],\n        [\"signUp\", \"Регистрация\"],\n        [\"forgotPassword\", \"Восстановить пароль\"],\n    ]);\n    const { signUp, signIn, forgotPassword, login } = useAuth();\n    const { showErrorSnackbar, showSuccessSnackbar } = useCustomSnackbar();\n\n    const handleSignIn = (data: ISignInData) => {\n        signIn(data)\n            .then((response) => {\n                transport.setToken(response.data.token);\n                login()\n                    .then((response) => {\n                        setUser(response.data);\n                        onClose();\n                    })\n                    .catch(() => showErrorSnackbar(\"Ошибка сервера. Попробуйте позже\"));\n            })\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    const handleSignUp = (data: ISignUpData) => {\n        signUp(data)\n            .then(() => showSuccessSnackbar(\"Вы успешно зарегистрированы!\"))\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    const handleForgotPassword = (data: { email: string }) => {\n        forgotPassword(data)\n            .then(() => {\n                showSuccessSnackbar(\"Пароль успешно отправлен\");\n            })\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    return (\n        <Popup open={open} onClose={onClose} title={popupTitle.get(mode)}>\n            {mode === \"signIn\" && (\n                <CustomForm<ISignInData>\n                    onSubmit={handleSignIn}\n                    validationSchema={signInValidationSchema}\n                    render={(form) => (\n                        <div className={styles.card}>\n                            <TextField name={\"email\"} label={\"Email\"} />\n                            <TextField name={\"password\"} label={\"Пароль\"} type={\"password\"} />\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={form?.submitForm}\n                                disabled={!form.isValid}\n                            >\n                                Войти\n                            </Button>\n                            <div className={styles.footer}>\n                                <div className={styles.link} onClick={() => setMode(\"signUp\")}>\n                                    Регистрация\n                                </div>\n                                <div\n                                    onClick={() => setMode(\"forgotPassword\")}\n                                    className={cx(\n                                        styles.link,\n                                        css`\n                                            margin-left: auto;\n                                        `,\n                                    )}\n                                >\n                                    Не могу вспомнить пароль\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                />\n            )}\n            {mode === \"signUp\" && (\n                <CustomForm<ISignUpData>\n                    onSubmit={handleSignUp}\n                    validationSchema={signUpValidationSchema}\n                    render={(form) => (\n                        <div className={styles.card}>\n                            <TextField name={\"login\"} label={\"Логин\"} />\n                            <TextField name={\"email\"} label={\"Email\"} />\n                            <TextField name={\"password\"} label={\"Пароль\"} type={\"password\"} />\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={form?.submitForm}\n                                disabled={!form.isValid}\n                            >\n                                Регистрация\n                            </Button>\n                            <div className={styles.footer}>\n                                <div className={styles.link} onClick={() => setMode(\"signIn\")}>\n                                    Войти\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                />\n            )}\n            {mode === \"forgotPassword\" && (\n                <CustomForm<{ email: string }>\n                    onSubmit={handleForgotPassword}\n                    validationSchema={forgotPasswordValidationSchema}\n                    render={(form) => (\n                        <div className={styles.card}>\n                            <Typography variant={\"h6\"} align={\"center\"}>\n                                На введенный е-mail мы отправим новый пароль\n                            </Typography>\n                            <TextField name={\"email\"} label={\"Email\"} />\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={form?.submitForm}\n                                disabled={!form.isValid}\n                            >\n                                Отправить\n                            </Button>\n                            <div className={styles.footer}>\n                                <div className={styles.link} onClick={() => setMode(\"signUp\")}>\n                                    Регистрация\n                                </div>\n                                <div\n                                    onClick={() => setMode(\"signIn\")}\n                                    className={cx(\n                                        styles.link,\n                                        css`\n                                            margin-left: auto;\n                                        `,\n                                    )}\n                                >\n                                    Войти\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                />\n            )}\n        </Popup>\n    );\n};\n","import React, {useContext, useState} from \"react\";\r\nimport {UserContext} from \"../../app\";\r\nimport {AppContext} from \"../../context\";\r\nimport {Avatar, Button, IconButton, Tooltip} from \"@material-ui/core\";\r\nimport {AccountCircle} from \"@material-ui/icons\";\r\nimport {Menu} from \"../menu\";\r\nimport {AuthPopup} from \"../../widgets/auth-popup\";\r\nimport {ConfirmPopup} from \"../confirm-popup\";\r\nimport {css} from \"emotion\";\r\nimport {Container} from \"../container\";\r\n\r\nconst styles = {\r\n    header: css`\r\n        width: 100%;\r\n        height: 80px;\r\n        background: #fff;\r\n        border-bottom: 1px solid #ccc;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        box-sizing: border-box;\r\n    `,\r\n    content: css`\r\n        height: calc(100vh - 80px);\r\n        overflow: auto;\r\n        background: rgb(247, 249, 252);\r\n    `,\r\n    inner: css`\r\n        width: 1200px;\r\n        margin: 0 auto;\r\n        padding: 40px 0;\r\n    `,\r\n    profile: css`\r\n        margin-left: auto;\r\n    `,\r\n};\r\n\r\nexport const Header = () => {\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const isMenuOpen = Boolean(anchorEl);\r\n    const userContext = useContext(UserContext);\r\n    const [logoutPopupVisible, setLogoutPopupVisible] = useState(false);\r\n    const [authPopup, setAuthPopup] = useState(false);\r\n\r\n    function onOpenLogoutPopup(): void {\r\n        setLogoutPopupVisible(true);\r\n    }\r\n\r\n    function onCloseLogoutPopup(): void {\r\n        setLogoutPopupVisible(false);\r\n        handleMenuClose();\r\n    }\r\n\r\n    const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const logout = () => {\r\n        handleMenuClose();\r\n        localStorage.removeItem(\"token\");\r\n        userContext.setUser(undefined);\r\n        onCloseLogoutPopup();\r\n        AppContext.getHistory().push(`/`);\r\n    };\r\n\r\n    const goTo = (path: string) => {\r\n        AppContext.getHistory().push(`/${path}`);\r\n        handleMenuClose();\r\n    };\r\n    return (\r\n        <>\r\n            <div className={styles.header}>\r\n                <Container className={css`display: flex`}>\r\n                    <div className={styles.profile}>\r\n                        {userContext.user ? (\r\n                            <>\r\n                                <Tooltip\r\n                                    title={userContext.user?.login || userContext.user?.email || \"\"}\r\n                                >\r\n                                    <IconButton onClick={handleProfileMenuOpen} color={\"inherit\"}>\r\n                                        {userContext.user?.avatar ? (\r\n                                            <Avatar src={userContext.user?.avatar} />\r\n                                        ) : (\r\n                                            <AccountCircle />\r\n                                        )}\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                                <Menu\r\n                                    anchor={anchorEl}\r\n                                    open={isMenuOpen}\r\n                                    onClose={handleMenuClose}\r\n                                    options={[\r\n                                        {\r\n                                            value: \"Профиль\",\r\n                                            handler: () => goTo(\"profile\"),\r\n                                        },\r\n                                        {\r\n                                            value: \"Выход\",\r\n                                            handler: onOpenLogoutPopup,\r\n                                        },\r\n                                    ]}\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => setAuthPopup(true)}\r\n                            >\r\n                                Войти\r\n                            </Button>\r\n                        )}\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n            <AuthPopup\r\n                open={authPopup}\r\n                setUser={userContext.setUser}\r\n                onClose={() => setAuthPopup(false)}\r\n            />\r\n            <ConfirmPopup\r\n                open={logoutPopupVisible}\r\n                title={\"Вы действительно хотите выйти?\"}\r\n                onClose={onCloseLogoutPopup}\r\n                onSubmit={logout}\r\n            />\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {Container} from \"../components/container\";\r\nimport {Header} from \"../components/header\";\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <Container>\r\n                <h1>Эта часть еще не готова</h1>\r\n                <h2>пока что можно только зарегаться, войти в аккаунт, восстановить пароль, и изменять логин, емейл и аватар</h2>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n","import React, { useContext } from \"react\";\nimport { Container } from \"../components/container\";\nimport { Header } from \"../components/header\";\nimport { css } from \"emotion\";\nimport { UserContext } from \"../app\";\nimport { UploadAvatar } from \"../components/upload-avatar\";\nimport { CustomForm } from \"../components/custom-form\";\nimport { IUser } from \"../entity\";\nimport { TextField } from \"../components/text-field\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { isEqual, omit } from \"lodash\";\nimport { useCustomSnackbar, useUser } from \"../hooks\";\nimport { getServerError } from \"../utils\";\n\nconst styles = {\n    content: css`\n        padding: 40px 0;\n        display: flex;\n        align-items: flex-start;\n    `,\n    avatar: css`\n        width: 300px;\n    `,\n    form: css`\n        width: 500px;\n        display: grid;\n        grid-template-columns: 1fr;\n        grid-row-gap: 30px;\n        margin-left: 40px;\n    `,\n};\n\nexport const Profile = () => {\n    const userContext = useContext(UserContext);\n    const { uploadAvatar, updateUser, deleteAvatar } = useUser();\n    const { showErrorSnackbar, showSuccessSnackbar } = useCustomSnackbar();\n\n    const handleAvatar = (file: File) => {\n        uploadAvatar({ avatar: file })\n            .then((response) => {\n                userContext.setUser(response.data);\n                showSuccessSnackbar(\"Успешно загружено\");\n            })\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    const handleDeleteAvatar = () => {\n        deleteAvatar()\n            .then((response) => {\n                userContext.setUser(response.data);\n                showSuccessSnackbar(\"Успешно удалено\");\n            })\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    const handleUpdateUser = (data: Partial<IUser>) => {\n        updateUser(omit(data, [\"avatar\"]))\n            .then((response) => {\n                userContext.setUser(response.data);\n                showSuccessSnackbar(\"Успешно обновлено\");\n            })\n            .catch((err) => {\n                const error = getServerError(err);\n                if (error) {\n                    showErrorSnackbar(error.title);\n                }\n            });\n    };\n\n    return (\n        <>\n            <Header />\n            <Container>\n                <Typography variant={\"h3\"}>\n                    Профиль пользователя {userContext.user.login}\n                </Typography>\n                <div className={styles.content}>\n                    <div className={styles.avatar}>\n                        <UploadAvatar\n                            src={userContext.user.avatar}\n                            onDeleteAvatar={handleDeleteAvatar}\n                            uploadAvatar={handleAvatar}\n                        />\n                    </div>\n                    <CustomForm<Partial<IUser>>\n                        data={userContext.user}\n                        onSubmit={handleUpdateUser}\n                        render={(form) => (\n                            <div className={styles.form}>\n                                <TextField\n                                    name={\"email\"}\n                                    label={\"Email\"}\n                                    InputLabelProps={{ shrink: !!form?.values?.login }}\n                                />\n                                <TextField\n                                    name={\"login\"}\n                                    label={\"Логин\"}\n                                    InputLabelProps={{ shrink: !!form?.values?.login }}\n                                />\n                                <Button\n                                    fullWidth\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={form?.submitForm}\n                                    disabled={\n                                        !form.isValid || isEqual(form?.values, form?.initialValues)\n                                    }\n                                >\n                                    Сохранить\n                                </Button>\n                            </div>\n                        )}\n                    />\n                </div>\n            </Container>\n        </>\n    );\n};\n","import {IUpdateAvatar, IUser, TResponse} from \"../entity\";\nimport {useCallback, useEffect, useState} from \"react\";\nimport { UserAPI } from \"../api\";\n\nexport function useUser(): {\n    user: IUser | undefined;\n    getUser: () => Promise<void>;\n    updateUser: (user: Partial<IUser>) => Promise<TResponse<IUser>>;\n    uploadAvatar: (data: IUpdateAvatar) => Promise<TResponse<IUser>>;\n    deleteAvatar: () => Promise<TResponse<IUser>>;\n} {\n    const [user, setUser] = useState<IUser | undefined>(undefined);\n\n    const getUser = useCallback(() => {\n        return UserAPI.getUser().then((response) => setUser(response.data));\n    }, []);\n\n    const updateUser = useCallback((user: Partial<IUser>) => {\n        return UserAPI.editUser(user);\n    }, []);\n\n    const uploadAvatar = useCallback((data: IUpdateAvatar) => {\n        return UserAPI.uploadAvatar(data);\n    }, []);\n\n    const deleteAvatar = useCallback(() => {\n        return UserAPI.deleteAvatar();\n    }, []);\n\n    return { user, deleteAvatar, getUser, updateUser, uploadAvatar };\n}\n","import React, { createContext, useEffect, useState } from \"react\";\nimport { IConfig, IUser, IUserContext } from \"../entity\";\nimport { transport } from \"../service\";\nimport { Route, Router } from \"react-router\";\nimport { AppContext } from \"../context\";\nimport {Main, Profile} from \"../pages\";\nimport { SnackbarProvider } from \"notistack\";\nimport { useAuth } from \"../hooks\";\nimport {PrivateRoute} from \"../components/private-route\";\nimport {log} from \"util\";\n\nconst config: IConfig = require(\"../config/config.json\"); // данные находятся в консоли firebase\ntransport.init(config.serverUrl);\nexport const UserContext = createContext<IUserContext | undefined>(undefined);\n\nexport const App = () => {\n    const [user, setUser] = useState<IUser | undefined>(undefined);\n    const [logged, setLogged] = useState(false);\n    const { login } = useAuth();\n\n    useEffect(() => {\n        window.onbeforeunload = () => {\n            localStorage.setItem(\"pathBeforeReload\", window.location.pathname);\n        }\n    }, []);\n\n    useEffect(() => {\n        const token = localStorage.getItem(\"token\");\n        if (token) {\n            transport.setToken(token);\n            login().then((response) => {\n                setUser(response.data);\n                setLogged(true);\n                const redirectPath = localStorage.getItem(\"pathBeforeReload\");\n                if (redirectPath) {\n                    AppContext.getHistory().push(redirectPath);\n                }\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        setLogged(!!user);\n    }, [user]);\n\n    return (\n        <UserContext.Provider value={{ user, setUser }}>\n            <SnackbarProvider>\n                <Router history={AppContext.getHistory()}>\n                    <PrivateRoute auth={logged} exact path={\"/profile\"} render={() => <Profile />} />\n                    <Route path={\"/\"} exact>\n                        <Main />\n                    </Route>\n                </Router>\n            </SnackbarProvider>\n        </UserContext.Provider>\n    );\n};\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { JssProvider } from \"./components\";\n\nReactDOM.render(\n    <JssProvider>\n        <App />\n    </JssProvider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}