{"version":3,"sources":["service/Transport.ts","context/AppContext.ts","components/public-route/PublicRoute.tsx","components/custom-form/CustomForm.tsx","components/text-field/TextField.tsx","components/jss-provider/JssProvider.tsx","pages/SignIn.tsx","hooks/useSignIn.ts","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["transport","headers","token","instance","serverUrl","this","axios","create","baseURL","url","params","get","config","response","data","post","put","delete","localStorage","setItem","JSON","stringify","formData","FormData","mapValues","value","key","isString","File","append","history","createBrowserHistory","AppContext","PublicRoute","props","auth","render","rest","routeProps","exact","push","to","CustomForm","onSubmit","validationSchema","validate","validateOnBlur","validateOnChange","handleSubmit","useCallback","initialValues","stubObject","enableReinitialize","styles","errorMessage","emotion","errorText","TextField","name","label","error","classes","type","size","InputLabelProps","textarea","disable","field","meta","variant","fullWidth","multiline","disabled","helperText","className","FormHelperTextProps","root","margin","insertionPoint","document","getElementById","jss","jssPreset","JssProvider","children","StylesProvider","displayName","Yup","shape","email","required","password","length","wrapper","css","card","SignIn","setLogged","signIn","firebase","useContext","FirebaseContext","signInWithEmailAndPassword","useSignIn","then","form","Card","Typography","align","Button","color","onClick","submitForm","isValid","firebaseConfig","require","createContext","undefined","initializeApp","init","App","useState","logged","isInitialized","Promise","resolve","app","onAuthStateChanged","useEffect","Provider","path","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1fd5996d.chunk.js","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\r\nimport { AxiosRequestConfig } from \"axios\";\r\nimport { mapValues, isString } from \"lodash\";\r\n\r\nexport type TransportConfig = Pick<AxiosRequestConfig, \"headers\" | \"baseURL\" | \"params\">;\r\n\r\nexport class Transport {\r\n    private headers = {};\r\n    private token?: string;\r\n    private instance: AxiosInstance = null;\r\n\r\n    init(serverUrl: string): void {\r\n        this.instance = axios.create({\r\n            baseURL: serverUrl,\r\n        });\r\n    }\r\n\r\n    async get<Response>(url: string, params?: object): Promise<Response> {\r\n        const response = await this.instance.get(url, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    async post<Request, Response>(\r\n        url: string,\r\n        data?: Request,\r\n        params?: object,\r\n    ): Promise<Response> {\r\n        const response = await this.instance.post(url, data, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    async put<Request, Response>(\r\n        url: string,\r\n        data: Request,\r\n        params?: object,\r\n    ): Promise<Response> {\r\n        const response = await this.instance.put(url, data, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    async delete<Response = void>(url: string, params?: object): Promise<Response> {\r\n        const response = await this.instance.delete(url, this.config(params));\r\n        return response.data;\r\n    }\r\n\r\n    setToken(token: string): void {\r\n        this.token = token;\r\n        localStorage.setItem(\"token\", JSON.stringify(token));\r\n    }\r\n\r\n    formatToFormData(params: {}): FormData {\r\n        const formData = new FormData();\r\n        mapValues(params, (value: string | File, key) => {\r\n            const isFile = !isString(value) && (value as {}) instanceof File;\r\n            if (!isFile && !isString(value)) {\r\n                return formData.append(key, JSON.stringify(value));\r\n            }\r\n            formData.append(key, value);\r\n        });\r\n        return formData;\r\n    }\r\n\r\n    private config(params?: object): TransportConfig {\r\n        return {\r\n            headers: {\r\n                ...this.headers,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            params,\r\n        };\r\n    }\r\n}\r\n\r\nexport const transport = new Transport();\r\n","import { createBrowserHistory, History } from \"history\";\n\nconst history = createBrowserHistory();\n\nexport const AppContext = {\n    getHistory(): History {\n        return history;\n    },\n};\n","import React, { FC, useEffect } from \"react\";\nimport { Route, Redirect, RouteProps, RouteComponentProps } from \"react-router\";\n\ninterface IPublicRouteProps extends RouteProps {\n    auth: boolean;\n    render: (props: RouteComponentProps) => React.ReactNode;\n}\n\nexport const PublicRoute: FC<IPublicRouteProps> = (props) => {\n    const { auth, render, ...rest } = props;\n    return (\n        <Route\n            {...rest}\n            render={(routeProps: RouteComponentProps) =>\n                auth ? <Redirect exact={true} push={true} to={\"/\"} /> : render(routeProps)\n            }\n        />\n    );\n};\n","import React, { useCallback } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { FormikErrors, FormikProps } from \"formik/dist/types\";\r\nimport { stubObject } from \"lodash\";\r\n\r\ninterface ICustomFormProps<T> {\r\n    data?: T;\r\n    validationSchema?: any | (() => any);\r\n    validateOnChange?: boolean;\r\n    validateOnBlur?: boolean;\r\n\r\n    render(props?: FormikProps<T>): void;\r\n\r\n    onSubmit?(data: T): void;\r\n\r\n    validate?(data: T): void | object | Promise<FormikErrors<T>>;\r\n}\r\n\r\nexport const CustomForm = <T extends object>(props: ICustomFormProps<T>) => {\r\n    const {\r\n        data = {},\r\n        onSubmit,\r\n        validationSchema,\r\n        render,\r\n        validate,\r\n        validateOnBlur = true,\r\n        validateOnChange = true,\r\n    } = props;\r\n\r\n    const handleSubmit = useCallback(\r\n        (data: T) => {\r\n            if (!onSubmit) {\r\n                return;\r\n            }\r\n            onSubmit(data);\r\n        },\r\n        [onSubmit],\r\n    );\r\n\r\n    return (\r\n        <Formik<T>\r\n            initialValues={data || stubObject()}\r\n            onSubmit={handleSubmit}\r\n            validate={validate}\r\n            validationSchema={validationSchema}\r\n            validateOnChange={validateOnChange}\r\n            validateOnBlur={validateOnBlur}\r\n            enableReinitialize\r\n        >\r\n            {(props) => render(props)}\r\n        </Formik>\r\n    );\r\n};\r\n","import * as emotion from \"emotion\";\r\nimport React from \"react\";\r\nimport { Field, FieldProps, FieldValidator } from \"formik\";\r\nimport { TextField as MaterialTextField, InputLabelProps } from \"@material-ui/core\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\n\r\ninterface ITextFieldProps {\r\n    name: string;\r\n    InputLabelProps?: InputLabelProps;\r\n    label?: string;\r\n    error?: boolean;\r\n    classes?: object;\r\n    type?: string;\r\n    size?: \"small\" | \"medium\";\r\n    textarea?: boolean;\r\n    validate?: FieldValidator;\r\n    disable?: boolean;\r\n}\r\n\r\nconst styles = {\r\n    errorMessage: emotion.css`\r\n        margin: 10px 0 0 0 !important;\r\n        display: flex;\r\n        align-items: center;\r\n    `,\r\n    errorText: emotion.css`\r\n        padding-left: 10px;\r\n    `,\r\n};\r\n\r\nexport const TextField = (props: ITextFieldProps) => {\r\n    const {\r\n        name,\r\n        label,\r\n        error,\r\n        classes,\r\n        type = \"text\",\r\n        size,\r\n        InputLabelProps,\r\n        textarea = false,\r\n        validate,\r\n        disable\r\n    } = props;\r\n\r\n    return (\r\n        <Field name={name} validate={validate}>\r\n            {({ field, meta }: FieldProps) => (\r\n                <MaterialTextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    label={label}\r\n                    type={type}\r\n                    error={!!meta.error || error}\r\n                    size={size}\r\n                    InputLabelProps={InputLabelProps}\r\n                    multiline={textarea}\r\n                    disabled={disable}\r\n                    helperText={\r\n                        meta.error && (\r\n                            <>\r\n                                <ErrorIcon />\r\n                                <span className={styles.errorText}>{meta.error}</span>\r\n                            </>\r\n                        )\r\n                    }\r\n                    FormHelperTextProps={{\r\n                        classes: { root: styles.errorMessage },\r\n                    }}\r\n                    classes={classes}\r\n                    margin=\"normal\"\r\n                    {...field}\r\n                />\r\n            )}\r\n        </Field>\r\n    );\r\n};\r\n","import { jssPreset, StylesProvider } from \"@material-ui/styles\";\r\nimport { create } from \"jss\";\r\nimport * as React from \"react\";\r\n\r\nconst insertionPoint = document.getElementById(\"jss-insertion-point\");\r\n\r\nconst jss = create({\r\n    ...jssPreset(),\r\n    insertionPoint: insertionPoint!,\r\n});\r\n\r\nexport const JssProvider: React.FC = ({ children }) => {\r\n    return <StylesProvider jss={jss}>{children}</StylesProvider>;\r\n};\r\n\r\nJssProvider.displayName = \"JssProvider\";\r\n","import React from \"react\";\nimport { css } from \"emotion\";\nimport { useSignIn } from \"../hooks\";\nimport { ISignInData } from \"../entity\";\nimport { Button, Card, Typography } from \"@material-ui/core\";\nimport { TextField, CustomForm } from \"../components\";\nimport { AppContext } from \"../context\";\nimport * as Yup from \"yup\";\n\ninterface Props {\n    setLogged(value: boolean): void;\n}\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Некорректный e-mail\").required(\"Обязательно для заполнения\"),\n    password: Yup.string()\n        .required(\"Обязательно для заполнения\")\n        .length(6, \"Пароль должен быть не меньше 6 символов\"),\n});\n\nconst styles = {\n    wrapper: css`\n        width: 100vw;\n        height: 100vh;\n        position: fixed;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background: #f5f5f5;\n    `,\n    card: css`\n        padding: 20px;\n        display: grid;\n        grid-template-columns: 1fr;\n        grid-row-gap: 20px;\n        width: 500px;\n    `,\n};\n\nexport const SignIn = (props: Props) => {\n    const { setLogged } = props;\n    const { signIn } = useSignIn();\n\n    const handleSignIn = (data: ISignInData) => {\n        signIn(data).then(() => {\n            setLogged(true);\n            AppContext.getHistory().push(\"/\");\n        });\n    };\n\n    return (\n        <CustomForm<ISignInData>\n            onSubmit={handleSignIn}\n            validationSchema={validationSchema}\n            render={(form) => (\n                <div className={styles.wrapper}>\n                    <Card className={styles.card}>\n                        <Typography variant={\"h4\"} align={\"center\"}>\n                            Войти\n                        </Typography>\n                        <TextField name={\"email\"} label={\"Email\"} />\n                        <TextField name={\"password\"} label={\"Пароль\"} type={\"password\"} />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={form?.submitForm}\n                            disabled={!form.isValid}\n                        >\n                            Войти\n                        </Button>\n                    </Card>\n                </div>\n            )}\n        />\n    );\n};\n","import { ISignInData } from \"../entity\";\r\nimport { useContext } from \"react\";\r\nimport { FirebaseContext } from \"../app/App\";\r\n\r\nexport function useSignIn(): {\r\n    signIn: (data: ISignInData) => Promise<firebase.auth.UserCredential>;\r\n} {\r\n    const firebase = useContext(FirebaseContext);\r\n\r\n    const signIn = (data: ISignInData) => {\r\n        return firebase.auth().signInWithEmailAndPassword(data.email, data.password);\r\n    };\r\n\r\n    return { signIn };\r\n}\r\n","import React, {createContext, useCallback, useEffect, useState} from \"react\";\nimport {IConfig, IFirebaseConfig} from \"../entity\";\nimport firebase from \"firebase\";\nimport {transport} from \"../service\";\nimport {Router} from \"react-router\";\nimport {AppContext} from \"../context\";\nimport {PublicRoute} from \"../components/public-route\";\nimport {SignIn} from \"../pages\";\n\nconst firebaseConfig: IFirebaseConfig = require(\"../config/firebase-config.json\"); // данные находятся в консоли firebase\nconst config: IConfig = require(\"../config/config.json\"); // данные находятся в консоли firebase\n\nexport const FirebaseContext = createContext<firebase.app.App | undefined>(undefined);\nfirebase.initializeApp(firebaseConfig);\ntransport.init(config.serverUrl);\n\nexport const App = () => {\n    const [logged, setLogged] = useState(false);\n\n    const isInitialized = useCallback(() => {\n        return new Promise((resolve) => {\n            firebase\n                .app()\n                .auth()\n                .onAuthStateChanged(resolve);\n        });\n    }, []);\n\n    useEffect(() => {\n        isInitialized().then((data) => setLogged(!!data));\n    }, [isInitialized]);\n\n    return (\n        <FirebaseContext.Provider value={firebase.app()}>\n            <Router history={AppContext.getHistory()}>\n                <PublicRoute\n                    auth={logged}\n                    path={\"/sign-in\"}\n                    exact\n                    render={() => <SignIn setLogged={setLogged} />}\n                />\n            </Router>\n        </FirebaseContext.Provider>\n        );\n}\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { JssProvider } from \"./components\";\n\nReactDOM.render(\n    <JssProvider>\n        <App />\n    </JssProvider>,\n    document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}